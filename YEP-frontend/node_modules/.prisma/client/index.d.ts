
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users_tbl
 * 
 */
export type users_tbl = {
  usr_id: number
  usr_username: string
  usr_mail: string
  usr_password: string
  usr_permissions: boolean
  usr_token_iat: number | null
  usr_token_exp: number | null
}

/**
 * Model data_tbl
 * 
 */
export type data_tbl = {
  dta_id: number
  dta_date: Date
  dta_content: Prisma.JsonValue
  dta_tool: number
  dta_user: number
}

/**
 * Model images_tbl
 * 
 */
export type images_tbl = {
  img_id: number
  img_name: string
  img_path: string
}

/**
 * Model players_tbl
 * 
 */
export type players_tbl = {
  ply_id: number
  ply_role: number
  ply_avatar: number
  ply_user: number
}

/**
 * Model plugins_tbl
 * 
 */
export type plugins_tbl = {
  plg_id: number
  plg_name: string
  plg_description: string
  plg_path: string
  plg_tool: number
}

/**
 * Model projects_tbl
 * 
 */
export type projects_tbl = {
  prj_id: number
  proj_name: string
  prj_description: number
  prj_config: Prisma.JsonValue
  prj_owner: number
  prj_avatar: number
}

/**
 * Model roles_tbl
 * 
 */
export type roles_tbl = {
  rle_id: number
  rle_name: string
  rle_description: number
}

/**
 * Model tools_tbl
 * 
 */
export type tools_tbl = {
  too_id: number
  too_name: string
  too_description: string
  too_category: number
  too_path: string
  too_project: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users_tbls
 * const users_tbls = await prisma.users_tbl.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users_tbls
   * const users_tbls = await prisma.users_tbl.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users_tbl`: Exposes CRUD operations for the **users_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_tbls
    * const users_tbls = await prisma.users_tbl.findMany()
    * ```
    */
  get users_tbl(): Prisma.users_tblDelegate<GlobalReject>;

  /**
   * `prisma.data_tbl`: Exposes CRUD operations for the **data_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Data_tbls
    * const data_tbls = await prisma.data_tbl.findMany()
    * ```
    */
  get data_tbl(): Prisma.data_tblDelegate<GlobalReject>;

  /**
   * `prisma.images_tbl`: Exposes CRUD operations for the **images_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images_tbls
    * const images_tbls = await prisma.images_tbl.findMany()
    * ```
    */
  get images_tbl(): Prisma.images_tblDelegate<GlobalReject>;

  /**
   * `prisma.players_tbl`: Exposes CRUD operations for the **players_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players_tbls
    * const players_tbls = await prisma.players_tbl.findMany()
    * ```
    */
  get players_tbl(): Prisma.players_tblDelegate<GlobalReject>;

  /**
   * `prisma.plugins_tbl`: Exposes CRUD operations for the **plugins_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plugins_tbls
    * const plugins_tbls = await prisma.plugins_tbl.findMany()
    * ```
    */
  get plugins_tbl(): Prisma.plugins_tblDelegate<GlobalReject>;

  /**
   * `prisma.projects_tbl`: Exposes CRUD operations for the **projects_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects_tbls
    * const projects_tbls = await prisma.projects_tbl.findMany()
    * ```
    */
  get projects_tbl(): Prisma.projects_tblDelegate<GlobalReject>;

  /**
   * `prisma.roles_tbl`: Exposes CRUD operations for the **roles_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles_tbls
    * const roles_tbls = await prisma.roles_tbl.findMany()
    * ```
    */
  get roles_tbl(): Prisma.roles_tblDelegate<GlobalReject>;

  /**
   * `prisma.tools_tbl`: Exposes CRUD operations for the **tools_tbl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tools_tbls
    * const tools_tbls = await prisma.tools_tbl.findMany()
    * ```
    */
  get tools_tbl(): Prisma.tools_tblDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users_tbl: 'users_tbl',
    data_tbl: 'data_tbl',
    images_tbl: 'images_tbl',
    players_tbl: 'players_tbl',
    plugins_tbl: 'plugins_tbl',
    projects_tbl: 'projects_tbl',
    roles_tbl: 'roles_tbl',
    tools_tbl: 'tools_tbl'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Users_tblCountOutputType
   */


  export type Users_tblCountOutputType = {
    players_tbl: number
  }

  export type Users_tblCountOutputTypeSelect = {
    players_tbl?: boolean
  }

  export type Users_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Users_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Users_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Users_tblCountOutputTypeArgs
    ?'include' extends U
    ? Users_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Users_tblCountOutputType ? Users_tblCountOutputType[P] : never
  } 
    : Users_tblCountOutputType
  : Users_tblCountOutputType




  // Custom InputTypes

  /**
   * Users_tblCountOutputType without action
   */
  export type Users_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Users_tblCountOutputType
     * 
    **/
    select?: Users_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Images_tblCountOutputType
   */


  export type Images_tblCountOutputType = {
    players_tbl: number
    projects_tbl: number
  }

  export type Images_tblCountOutputTypeSelect = {
    players_tbl?: boolean
    projects_tbl?: boolean
  }

  export type Images_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Images_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Images_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Images_tblCountOutputTypeArgs
    ?'include' extends U
    ? Images_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Images_tblCountOutputType ? Images_tblCountOutputType[P] : never
  } 
    : Images_tblCountOutputType
  : Images_tblCountOutputType




  // Custom InputTypes

  /**
   * Images_tblCountOutputType without action
   */
  export type Images_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Images_tblCountOutputType
     * 
    **/
    select?: Images_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Players_tblCountOutputType
   */


  export type Players_tblCountOutputType = {
    data_tbl: number
    projects_tbl: number
  }

  export type Players_tblCountOutputTypeSelect = {
    data_tbl?: boolean
    projects_tbl?: boolean
  }

  export type Players_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Players_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Players_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Players_tblCountOutputTypeArgs
    ?'include' extends U
    ? Players_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Players_tblCountOutputType ? Players_tblCountOutputType[P] : never
  } 
    : Players_tblCountOutputType
  : Players_tblCountOutputType




  // Custom InputTypes

  /**
   * Players_tblCountOutputType without action
   */
  export type Players_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Players_tblCountOutputType
     * 
    **/
    select?: Players_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Projects_tblCountOutputType
   */


  export type Projects_tblCountOutputType = {
    tools_tbl: number
  }

  export type Projects_tblCountOutputTypeSelect = {
    tools_tbl?: boolean
  }

  export type Projects_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Projects_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Projects_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Projects_tblCountOutputTypeArgs
    ?'include' extends U
    ? Projects_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Projects_tblCountOutputType ? Projects_tblCountOutputType[P] : never
  } 
    : Projects_tblCountOutputType
  : Projects_tblCountOutputType




  // Custom InputTypes

  /**
   * Projects_tblCountOutputType without action
   */
  export type Projects_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Projects_tblCountOutputType
     * 
    **/
    select?: Projects_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Roles_tblCountOutputType
   */


  export type Roles_tblCountOutputType = {
    players_tbl: number
  }

  export type Roles_tblCountOutputTypeSelect = {
    players_tbl?: boolean
  }

  export type Roles_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Roles_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Roles_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Roles_tblCountOutputTypeArgs
    ?'include' extends U
    ? Roles_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Roles_tblCountOutputType ? Roles_tblCountOutputType[P] : never
  } 
    : Roles_tblCountOutputType
  : Roles_tblCountOutputType




  // Custom InputTypes

  /**
   * Roles_tblCountOutputType without action
   */
  export type Roles_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Roles_tblCountOutputType
     * 
    **/
    select?: Roles_tblCountOutputTypeSelect | null
  }



  /**
   * Count Type Tools_tblCountOutputType
   */


  export type Tools_tblCountOutputType = {
    data_tbl: number
    plugins_tbl: number
  }

  export type Tools_tblCountOutputTypeSelect = {
    data_tbl?: boolean
    plugins_tbl?: boolean
  }

  export type Tools_tblCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tools_tblCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tools_tblCountOutputType
    : S extends undefined
    ? never
    : S extends Tools_tblCountOutputTypeArgs
    ?'include' extends U
    ? Tools_tblCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tools_tblCountOutputType ? Tools_tblCountOutputType[P] : never
  } 
    : Tools_tblCountOutputType
  : Tools_tblCountOutputType




  // Custom InputTypes

  /**
   * Tools_tblCountOutputType without action
   */
  export type Tools_tblCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tools_tblCountOutputType
     * 
    **/
    select?: Tools_tblCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users_tbl
   */


  export type AggregateUsers_tbl = {
    _count: Users_tblCountAggregateOutputType | null
    _avg: Users_tblAvgAggregateOutputType | null
    _sum: Users_tblSumAggregateOutputType | null
    _min: Users_tblMinAggregateOutputType | null
    _max: Users_tblMaxAggregateOutputType | null
  }

  export type Users_tblAvgAggregateOutputType = {
    usr_id: number | null
    usr_token_iat: number | null
    usr_token_exp: number | null
  }

  export type Users_tblSumAggregateOutputType = {
    usr_id: number | null
    usr_token_iat: number | null
    usr_token_exp: number | null
  }

  export type Users_tblMinAggregateOutputType = {
    usr_id: number | null
    usr_username: string | null
    usr_mail: string | null
    usr_password: string | null
    usr_permissions: boolean | null
    usr_token_iat: number | null
    usr_token_exp: number | null
  }

  export type Users_tblMaxAggregateOutputType = {
    usr_id: number | null
    usr_username: string | null
    usr_mail: string | null
    usr_password: string | null
    usr_permissions: boolean | null
    usr_token_iat: number | null
    usr_token_exp: number | null
  }

  export type Users_tblCountAggregateOutputType = {
    usr_id: number
    usr_username: number
    usr_mail: number
    usr_password: number
    usr_permissions: number
    usr_token_iat: number
    usr_token_exp: number
    _all: number
  }


  export type Users_tblAvgAggregateInputType = {
    usr_id?: true
    usr_token_iat?: true
    usr_token_exp?: true
  }

  export type Users_tblSumAggregateInputType = {
    usr_id?: true
    usr_token_iat?: true
    usr_token_exp?: true
  }

  export type Users_tblMinAggregateInputType = {
    usr_id?: true
    usr_username?: true
    usr_mail?: true
    usr_password?: true
    usr_permissions?: true
    usr_token_iat?: true
    usr_token_exp?: true
  }

  export type Users_tblMaxAggregateInputType = {
    usr_id?: true
    usr_username?: true
    usr_mail?: true
    usr_password?: true
    usr_permissions?: true
    usr_token_iat?: true
    usr_token_exp?: true
  }

  export type Users_tblCountAggregateInputType = {
    usr_id?: true
    usr_username?: true
    usr_mail?: true
    usr_password?: true
    usr_permissions?: true
    usr_token_iat?: true
    usr_token_exp?: true
    _all?: true
  }

  export type Users_tblAggregateArgs = {
    /**
     * Filter which users_tbl to aggregate.
     * 
    **/
    where?: users_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<users_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: users_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_tbls
    **/
    _count?: true | Users_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_tblMaxAggregateInputType
  }

  export type GetUsers_tblAggregateType<T extends Users_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_tbl[P]>
      : GetScalarType<T[P], AggregateUsers_tbl[P]>
  }




  export type Users_tblGroupByArgs = {
    where?: users_tblWhereInput
    orderBy?: Enumerable<users_tblOrderByWithAggregationInput>
    by: Array<Users_tblScalarFieldEnum>
    having?: users_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_tblCountAggregateInputType | true
    _avg?: Users_tblAvgAggregateInputType
    _sum?: Users_tblSumAggregateInputType
    _min?: Users_tblMinAggregateInputType
    _max?: Users_tblMaxAggregateInputType
  }


  export type Users_tblGroupByOutputType = {
    usr_id: number
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat: number | null
    usr_token_exp: number | null
    _count: Users_tblCountAggregateOutputType | null
    _avg: Users_tblAvgAggregateOutputType | null
    _sum: Users_tblSumAggregateOutputType | null
    _min: Users_tblMinAggregateOutputType | null
    _max: Users_tblMaxAggregateOutputType | null
  }

  type GetUsers_tblGroupByPayload<T extends Users_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Users_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Users_tblGroupByOutputType[P]>
        }
      >
    >


  export type users_tblSelect = {
    usr_id?: boolean
    usr_username?: boolean
    usr_mail?: boolean
    usr_password?: boolean
    usr_permissions?: boolean
    usr_token_iat?: boolean
    usr_token_exp?: boolean
    players_tbl?: boolean | players_tblFindManyArgs
    _count?: boolean | Users_tblCountOutputTypeArgs
  }

  export type users_tblInclude = {
    players_tbl?: boolean | players_tblFindManyArgs
    _count?: boolean | Users_tblCountOutputTypeArgs
  }

  export type users_tblGetPayload<
    S extends boolean | null | undefined | users_tblArgs,
    U = keyof S
      > = S extends true
        ? users_tbl
    : S extends undefined
    ? never
    : S extends users_tblArgs | users_tblFindManyArgs
    ?'include' extends U
    ? users_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Users_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Users_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users_tbl ? users_tbl[P] : never
  } 
    : users_tbl
  : users_tbl


  type users_tblCountArgs = Merge<
    Omit<users_tblFindManyArgs, 'select' | 'include'> & {
      select?: Users_tblCountAggregateInputType | true
    }
  >

  export interface users_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users_tbl that matches the filter.
     * @param {users_tblFindUniqueArgs} args - Arguments to find a Users_tbl
     * @example
     * // Get one Users_tbl
     * const users_tbl = await prisma.users_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends users_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, users_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users_tbl'> extends True ? CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>> : CheckSelect<T, Prisma__users_tblClient<users_tbl | null >, Prisma__users_tblClient<users_tblGetPayload<T> | null >>

    /**
     * Find the first Users_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tblFindFirstArgs} args - Arguments to find a Users_tbl
     * @example
     * // Get one Users_tbl
     * const users_tbl = await prisma.users_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends users_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, users_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users_tbl'> extends True ? CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>> : CheckSelect<T, Prisma__users_tblClient<users_tbl | null >, Prisma__users_tblClient<users_tblGetPayload<T> | null >>

    /**
     * Find zero or more Users_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_tbls
     * const users_tbls = await prisma.users_tbl.findMany()
     * 
     * // Get first 10 Users_tbls
     * const users_tbls = await prisma.users_tbl.findMany({ take: 10 })
     * 
     * // Only select the `usr_id`
     * const users_tblWithUsr_idOnly = await prisma.users_tbl.findMany({ select: { usr_id: true } })
     * 
    **/
    findMany<T extends users_tblFindManyArgs>(
      args?: SelectSubset<T, users_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users_tbl>>, PrismaPromise<Array<users_tblGetPayload<T>>>>

    /**
     * Create a Users_tbl.
     * @param {users_tblCreateArgs} args - Arguments to create a Users_tbl.
     * @example
     * // Create one Users_tbl
     * const Users_tbl = await prisma.users_tbl.create({
     *   data: {
     *     // ... data to create a Users_tbl
     *   }
     * })
     * 
    **/
    create<T extends users_tblCreateArgs>(
      args: SelectSubset<T, users_tblCreateArgs>
    ): CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>>

    /**
     * Create many Users_tbls.
     *     @param {users_tblCreateManyArgs} args - Arguments to create many Users_tbls.
     *     @example
     *     // Create many Users_tbls
     *     const users_tbl = await prisma.users_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends users_tblCreateManyArgs>(
      args?: SelectSubset<T, users_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users_tbl.
     * @param {users_tblDeleteArgs} args - Arguments to delete one Users_tbl.
     * @example
     * // Delete one Users_tbl
     * const Users_tbl = await prisma.users_tbl.delete({
     *   where: {
     *     // ... filter to delete one Users_tbl
     *   }
     * })
     * 
    **/
    delete<T extends users_tblDeleteArgs>(
      args: SelectSubset<T, users_tblDeleteArgs>
    ): CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>>

    /**
     * Update one Users_tbl.
     * @param {users_tblUpdateArgs} args - Arguments to update one Users_tbl.
     * @example
     * // Update one Users_tbl
     * const users_tbl = await prisma.users_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends users_tblUpdateArgs>(
      args: SelectSubset<T, users_tblUpdateArgs>
    ): CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>>

    /**
     * Delete zero or more Users_tbls.
     * @param {users_tblDeleteManyArgs} args - Arguments to filter Users_tbls to delete.
     * @example
     * // Delete a few Users_tbls
     * const { count } = await prisma.users_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends users_tblDeleteManyArgs>(
      args?: SelectSubset<T, users_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_tbls
     * const users_tbl = await prisma.users_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends users_tblUpdateManyArgs>(
      args: SelectSubset<T, users_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users_tbl.
     * @param {users_tblUpsertArgs} args - Arguments to update or create a Users_tbl.
     * @example
     * // Update or create a Users_tbl
     * const users_tbl = await prisma.users_tbl.upsert({
     *   create: {
     *     // ... data to create a Users_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends users_tblUpsertArgs>(
      args: SelectSubset<T, users_tblUpsertArgs>
    ): CheckSelect<T, Prisma__users_tblClient<users_tbl>, Prisma__users_tblClient<users_tblGetPayload<T>>>

    /**
     * Count the number of Users_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tblCountArgs} args - Arguments to filter Users_tbls to count.
     * @example
     * // Count the number of Users_tbls
     * const count = await prisma.users_tbl.count({
     *   where: {
     *     // ... the filter for the Users_tbls we want to count
     *   }
     * })
    **/
    count<T extends users_tblCountArgs>(
      args?: Subset<T, users_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_tblAggregateArgs>(args: Subset<T, Users_tblAggregateArgs>): PrismaPromise<GetUsers_tblAggregateType<T>>

    /**
     * Group by Users_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Users_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Users_tblGroupByArgs['orderBy'] }
        : { orderBy?: Users_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Users_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__users_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    players_tbl<T extends players_tblFindManyArgs = {}>(args?: Subset<T, players_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<players_tbl>>, PrismaPromise<Array<players_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users_tbl findUnique
   */
  export type users_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * Throw an Error if a users_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users_tbl to fetch.
     * 
    **/
    where: users_tblWhereUniqueInput
  }


  /**
   * users_tbl findFirst
   */
  export type users_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * Throw an Error if a users_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users_tbl to fetch.
     * 
    **/
    where?: users_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<users_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_tbls.
     * 
    **/
    cursor?: users_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_tbls.
     * 
    **/
    distinct?: Enumerable<Users_tblScalarFieldEnum>
  }


  /**
   * users_tbl findMany
   */
  export type users_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * Filter, which users_tbls to fetch.
     * 
    **/
    where?: users_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<users_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_tbls.
     * 
    **/
    cursor?: users_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Users_tblScalarFieldEnum>
  }


  /**
   * users_tbl create
   */
  export type users_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * The data needed to create a users_tbl.
     * 
    **/
    data: XOR<users_tblCreateInput, users_tblUncheckedCreateInput>
  }


  /**
   * users_tbl createMany
   */
  export type users_tblCreateManyArgs = {
    /**
     * The data used to create many users_tbls.
     * 
    **/
    data: Enumerable<users_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users_tbl update
   */
  export type users_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * The data needed to update a users_tbl.
     * 
    **/
    data: XOR<users_tblUpdateInput, users_tblUncheckedUpdateInput>
    /**
     * Choose, which users_tbl to update.
     * 
    **/
    where: users_tblWhereUniqueInput
  }


  /**
   * users_tbl updateMany
   */
  export type users_tblUpdateManyArgs = {
    /**
     * The data used to update users_tbls.
     * 
    **/
    data: XOR<users_tblUpdateManyMutationInput, users_tblUncheckedUpdateManyInput>
    /**
     * Filter which users_tbls to update
     * 
    **/
    where?: users_tblWhereInput
  }


  /**
   * users_tbl upsert
   */
  export type users_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * The filter to search for the users_tbl to update in case it exists.
     * 
    **/
    where: users_tblWhereUniqueInput
    /**
     * In case the users_tbl found by the `where` argument doesn't exist, create a new users_tbl with this data.
     * 
    **/
    create: XOR<users_tblCreateInput, users_tblUncheckedCreateInput>
    /**
     * In case the users_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<users_tblUpdateInput, users_tblUncheckedUpdateInput>
  }


  /**
   * users_tbl delete
   */
  export type users_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
    /**
     * Filter which users_tbl to delete.
     * 
    **/
    where: users_tblWhereUniqueInput
  }


  /**
   * users_tbl deleteMany
   */
  export type users_tblDeleteManyArgs = {
    /**
     * Filter which users_tbls to delete
     * 
    **/
    where?: users_tblWhereInput
  }


  /**
   * users_tbl without action
   */
  export type users_tblArgs = {
    /**
     * Select specific fields to fetch from the users_tbl
     * 
    **/
    select?: users_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: users_tblInclude | null
  }



  /**
   * Model data_tbl
   */


  export type AggregateData_tbl = {
    _count: Data_tblCountAggregateOutputType | null
    _avg: Data_tblAvgAggregateOutputType | null
    _sum: Data_tblSumAggregateOutputType | null
    _min: Data_tblMinAggregateOutputType | null
    _max: Data_tblMaxAggregateOutputType | null
  }

  export type Data_tblAvgAggregateOutputType = {
    dta_id: number | null
    dta_tool: number | null
    dta_user: number | null
  }

  export type Data_tblSumAggregateOutputType = {
    dta_id: number | null
    dta_tool: number | null
    dta_user: number | null
  }

  export type Data_tblMinAggregateOutputType = {
    dta_id: number | null
    dta_date: Date | null
    dta_tool: number | null
    dta_user: number | null
  }

  export type Data_tblMaxAggregateOutputType = {
    dta_id: number | null
    dta_date: Date | null
    dta_tool: number | null
    dta_user: number | null
  }

  export type Data_tblCountAggregateOutputType = {
    dta_id: number
    dta_date: number
    dta_content: number
    dta_tool: number
    dta_user: number
    _all: number
  }


  export type Data_tblAvgAggregateInputType = {
    dta_id?: true
    dta_tool?: true
    dta_user?: true
  }

  export type Data_tblSumAggregateInputType = {
    dta_id?: true
    dta_tool?: true
    dta_user?: true
  }

  export type Data_tblMinAggregateInputType = {
    dta_id?: true
    dta_date?: true
    dta_tool?: true
    dta_user?: true
  }

  export type Data_tblMaxAggregateInputType = {
    dta_id?: true
    dta_date?: true
    dta_tool?: true
    dta_user?: true
  }

  export type Data_tblCountAggregateInputType = {
    dta_id?: true
    dta_date?: true
    dta_content?: true
    dta_tool?: true
    dta_user?: true
    _all?: true
  }

  export type Data_tblAggregateArgs = {
    /**
     * Filter which data_tbl to aggregate.
     * 
    **/
    where?: data_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<data_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: data_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned data_tbls
    **/
    _count?: true | Data_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Data_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Data_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Data_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Data_tblMaxAggregateInputType
  }

  export type GetData_tblAggregateType<T extends Data_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateData_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateData_tbl[P]>
      : GetScalarType<T[P], AggregateData_tbl[P]>
  }




  export type Data_tblGroupByArgs = {
    where?: data_tblWhereInput
    orderBy?: Enumerable<data_tblOrderByWithAggregationInput>
    by: Array<Data_tblScalarFieldEnum>
    having?: data_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Data_tblCountAggregateInputType | true
    _avg?: Data_tblAvgAggregateInputType
    _sum?: Data_tblSumAggregateInputType
    _min?: Data_tblMinAggregateInputType
    _max?: Data_tblMaxAggregateInputType
  }


  export type Data_tblGroupByOutputType = {
    dta_id: number
    dta_date: Date
    dta_content: JsonValue
    dta_tool: number
    dta_user: number
    _count: Data_tblCountAggregateOutputType | null
    _avg: Data_tblAvgAggregateOutputType | null
    _sum: Data_tblSumAggregateOutputType | null
    _min: Data_tblMinAggregateOutputType | null
    _max: Data_tblMaxAggregateOutputType | null
  }

  type GetData_tblGroupByPayload<T extends Data_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Data_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Data_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Data_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Data_tblGroupByOutputType[P]>
        }
      >
    >


  export type data_tblSelect = {
    dta_id?: boolean
    dta_date?: boolean
    dta_content?: boolean
    dta_tool?: boolean
    dta_user?: boolean
    tools_tbl?: boolean | tools_tblArgs
    players_tbl?: boolean | players_tblArgs
  }

  export type data_tblInclude = {
    tools_tbl?: boolean | tools_tblArgs
    players_tbl?: boolean | players_tblArgs
  }

  export type data_tblGetPayload<
    S extends boolean | null | undefined | data_tblArgs,
    U = keyof S
      > = S extends true
        ? data_tbl
    : S extends undefined
    ? never
    : S extends data_tblArgs | data_tblFindManyArgs
    ?'include' extends U
    ? data_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tools_tbl' ? tools_tblGetPayload<S['include'][P]> :
        P extends 'players_tbl' ? players_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tools_tbl' ? tools_tblGetPayload<S['select'][P]> :
        P extends 'players_tbl' ? players_tblGetPayload<S['select'][P]> :  P extends keyof data_tbl ? data_tbl[P] : never
  } 
    : data_tbl
  : data_tbl


  type data_tblCountArgs = Merge<
    Omit<data_tblFindManyArgs, 'select' | 'include'> & {
      select?: Data_tblCountAggregateInputType | true
    }
  >

  export interface data_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Data_tbl that matches the filter.
     * @param {data_tblFindUniqueArgs} args - Arguments to find a Data_tbl
     * @example
     * // Get one Data_tbl
     * const data_tbl = await prisma.data_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends data_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, data_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'data_tbl'> extends True ? CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>> : CheckSelect<T, Prisma__data_tblClient<data_tbl | null >, Prisma__data_tblClient<data_tblGetPayload<T> | null >>

    /**
     * Find the first Data_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_tblFindFirstArgs} args - Arguments to find a Data_tbl
     * @example
     * // Get one Data_tbl
     * const data_tbl = await prisma.data_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends data_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, data_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'data_tbl'> extends True ? CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>> : CheckSelect<T, Prisma__data_tblClient<data_tbl | null >, Prisma__data_tblClient<data_tblGetPayload<T> | null >>

    /**
     * Find zero or more Data_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Data_tbls
     * const data_tbls = await prisma.data_tbl.findMany()
     * 
     * // Get first 10 Data_tbls
     * const data_tbls = await prisma.data_tbl.findMany({ take: 10 })
     * 
     * // Only select the `dta_id`
     * const data_tblWithDta_idOnly = await prisma.data_tbl.findMany({ select: { dta_id: true } })
     * 
    **/
    findMany<T extends data_tblFindManyArgs>(
      args?: SelectSubset<T, data_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<data_tbl>>, PrismaPromise<Array<data_tblGetPayload<T>>>>

    /**
     * Create a Data_tbl.
     * @param {data_tblCreateArgs} args - Arguments to create a Data_tbl.
     * @example
     * // Create one Data_tbl
     * const Data_tbl = await prisma.data_tbl.create({
     *   data: {
     *     // ... data to create a Data_tbl
     *   }
     * })
     * 
    **/
    create<T extends data_tblCreateArgs>(
      args: SelectSubset<T, data_tblCreateArgs>
    ): CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>>

    /**
     * Create many Data_tbls.
     *     @param {data_tblCreateManyArgs} args - Arguments to create many Data_tbls.
     *     @example
     *     // Create many Data_tbls
     *     const data_tbl = await prisma.data_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends data_tblCreateManyArgs>(
      args?: SelectSubset<T, data_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Data_tbl.
     * @param {data_tblDeleteArgs} args - Arguments to delete one Data_tbl.
     * @example
     * // Delete one Data_tbl
     * const Data_tbl = await prisma.data_tbl.delete({
     *   where: {
     *     // ... filter to delete one Data_tbl
     *   }
     * })
     * 
    **/
    delete<T extends data_tblDeleteArgs>(
      args: SelectSubset<T, data_tblDeleteArgs>
    ): CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>>

    /**
     * Update one Data_tbl.
     * @param {data_tblUpdateArgs} args - Arguments to update one Data_tbl.
     * @example
     * // Update one Data_tbl
     * const data_tbl = await prisma.data_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends data_tblUpdateArgs>(
      args: SelectSubset<T, data_tblUpdateArgs>
    ): CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>>

    /**
     * Delete zero or more Data_tbls.
     * @param {data_tblDeleteManyArgs} args - Arguments to filter Data_tbls to delete.
     * @example
     * // Delete a few Data_tbls
     * const { count } = await prisma.data_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends data_tblDeleteManyArgs>(
      args?: SelectSubset<T, data_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Data_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Data_tbls
     * const data_tbl = await prisma.data_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends data_tblUpdateManyArgs>(
      args: SelectSubset<T, data_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Data_tbl.
     * @param {data_tblUpsertArgs} args - Arguments to update or create a Data_tbl.
     * @example
     * // Update or create a Data_tbl
     * const data_tbl = await prisma.data_tbl.upsert({
     *   create: {
     *     // ... data to create a Data_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Data_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends data_tblUpsertArgs>(
      args: SelectSubset<T, data_tblUpsertArgs>
    ): CheckSelect<T, Prisma__data_tblClient<data_tbl>, Prisma__data_tblClient<data_tblGetPayload<T>>>

    /**
     * Count the number of Data_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_tblCountArgs} args - Arguments to filter Data_tbls to count.
     * @example
     * // Count the number of Data_tbls
     * const count = await prisma.data_tbl.count({
     *   where: {
     *     // ... the filter for the Data_tbls we want to count
     *   }
     * })
    **/
    count<T extends data_tblCountArgs>(
      args?: Subset<T, data_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Data_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Data_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Data_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Data_tblAggregateArgs>(args: Subset<T, Data_tblAggregateArgs>): PrismaPromise<GetData_tblAggregateType<T>>

    /**
     * Group by Data_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Data_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Data_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Data_tblGroupByArgs['orderBy'] }
        : { orderBy?: Data_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Data_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetData_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for data_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__data_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tools_tbl<T extends tools_tblArgs = {}>(args?: Subset<T, tools_tblArgs>): CheckSelect<T, Prisma__tools_tblClient<tools_tbl | null >, Prisma__tools_tblClient<tools_tblGetPayload<T> | null >>;

    players_tbl<T extends players_tblArgs = {}>(args?: Subset<T, players_tblArgs>): CheckSelect<T, Prisma__players_tblClient<players_tbl | null >, Prisma__players_tblClient<players_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * data_tbl findUnique
   */
  export type data_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * Throw an Error if a data_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which data_tbl to fetch.
     * 
    **/
    where: data_tblWhereUniqueInput
  }


  /**
   * data_tbl findFirst
   */
  export type data_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * Throw an Error if a data_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which data_tbl to fetch.
     * 
    **/
    where?: data_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<data_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for data_tbls.
     * 
    **/
    cursor?: data_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of data_tbls.
     * 
    **/
    distinct?: Enumerable<Data_tblScalarFieldEnum>
  }


  /**
   * data_tbl findMany
   */
  export type data_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * Filter, which data_tbls to fetch.
     * 
    **/
    where?: data_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<data_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing data_tbls.
     * 
    **/
    cursor?: data_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Data_tblScalarFieldEnum>
  }


  /**
   * data_tbl create
   */
  export type data_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * The data needed to create a data_tbl.
     * 
    **/
    data: XOR<data_tblCreateInput, data_tblUncheckedCreateInput>
  }


  /**
   * data_tbl createMany
   */
  export type data_tblCreateManyArgs = {
    /**
     * The data used to create many data_tbls.
     * 
    **/
    data: Enumerable<data_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * data_tbl update
   */
  export type data_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * The data needed to update a data_tbl.
     * 
    **/
    data: XOR<data_tblUpdateInput, data_tblUncheckedUpdateInput>
    /**
     * Choose, which data_tbl to update.
     * 
    **/
    where: data_tblWhereUniqueInput
  }


  /**
   * data_tbl updateMany
   */
  export type data_tblUpdateManyArgs = {
    /**
     * The data used to update data_tbls.
     * 
    **/
    data: XOR<data_tblUpdateManyMutationInput, data_tblUncheckedUpdateManyInput>
    /**
     * Filter which data_tbls to update
     * 
    **/
    where?: data_tblWhereInput
  }


  /**
   * data_tbl upsert
   */
  export type data_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * The filter to search for the data_tbl to update in case it exists.
     * 
    **/
    where: data_tblWhereUniqueInput
    /**
     * In case the data_tbl found by the `where` argument doesn't exist, create a new data_tbl with this data.
     * 
    **/
    create: XOR<data_tblCreateInput, data_tblUncheckedCreateInput>
    /**
     * In case the data_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<data_tblUpdateInput, data_tblUncheckedUpdateInput>
  }


  /**
   * data_tbl delete
   */
  export type data_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
    /**
     * Filter which data_tbl to delete.
     * 
    **/
    where: data_tblWhereUniqueInput
  }


  /**
   * data_tbl deleteMany
   */
  export type data_tblDeleteManyArgs = {
    /**
     * Filter which data_tbls to delete
     * 
    **/
    where?: data_tblWhereInput
  }


  /**
   * data_tbl without action
   */
  export type data_tblArgs = {
    /**
     * Select specific fields to fetch from the data_tbl
     * 
    **/
    select?: data_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: data_tblInclude | null
  }



  /**
   * Model images_tbl
   */


  export type AggregateImages_tbl = {
    _count: Images_tblCountAggregateOutputType | null
    _avg: Images_tblAvgAggregateOutputType | null
    _sum: Images_tblSumAggregateOutputType | null
    _min: Images_tblMinAggregateOutputType | null
    _max: Images_tblMaxAggregateOutputType | null
  }

  export type Images_tblAvgAggregateOutputType = {
    img_id: number | null
  }

  export type Images_tblSumAggregateOutputType = {
    img_id: number | null
  }

  export type Images_tblMinAggregateOutputType = {
    img_id: number | null
    img_name: string | null
    img_path: string | null
  }

  export type Images_tblMaxAggregateOutputType = {
    img_id: number | null
    img_name: string | null
    img_path: string | null
  }

  export type Images_tblCountAggregateOutputType = {
    img_id: number
    img_name: number
    img_path: number
    _all: number
  }


  export type Images_tblAvgAggregateInputType = {
    img_id?: true
  }

  export type Images_tblSumAggregateInputType = {
    img_id?: true
  }

  export type Images_tblMinAggregateInputType = {
    img_id?: true
    img_name?: true
    img_path?: true
  }

  export type Images_tblMaxAggregateInputType = {
    img_id?: true
    img_name?: true
    img_path?: true
  }

  export type Images_tblCountAggregateInputType = {
    img_id?: true
    img_name?: true
    img_path?: true
    _all?: true
  }

  export type Images_tblAggregateArgs = {
    /**
     * Filter which images_tbl to aggregate.
     * 
    **/
    where?: images_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<images_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: images_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images_tbls
    **/
    _count?: true | Images_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Images_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Images_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Images_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Images_tblMaxAggregateInputType
  }

  export type GetImages_tblAggregateType<T extends Images_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateImages_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages_tbl[P]>
      : GetScalarType<T[P], AggregateImages_tbl[P]>
  }




  export type Images_tblGroupByArgs = {
    where?: images_tblWhereInput
    orderBy?: Enumerable<images_tblOrderByWithAggregationInput>
    by: Array<Images_tblScalarFieldEnum>
    having?: images_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Images_tblCountAggregateInputType | true
    _avg?: Images_tblAvgAggregateInputType
    _sum?: Images_tblSumAggregateInputType
    _min?: Images_tblMinAggregateInputType
    _max?: Images_tblMaxAggregateInputType
  }


  export type Images_tblGroupByOutputType = {
    img_id: number
    img_name: string
    img_path: string
    _count: Images_tblCountAggregateOutputType | null
    _avg: Images_tblAvgAggregateOutputType | null
    _sum: Images_tblSumAggregateOutputType | null
    _min: Images_tblMinAggregateOutputType | null
    _max: Images_tblMaxAggregateOutputType | null
  }

  type GetImages_tblGroupByPayload<T extends Images_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Images_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Images_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Images_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Images_tblGroupByOutputType[P]>
        }
      >
    >


  export type images_tblSelect = {
    img_id?: boolean
    img_name?: boolean
    img_path?: boolean
    players_tbl?: boolean | players_tblFindManyArgs
    projects_tbl?: boolean | projects_tblFindManyArgs
    _count?: boolean | Images_tblCountOutputTypeArgs
  }

  export type images_tblInclude = {
    players_tbl?: boolean | players_tblFindManyArgs
    projects_tbl?: boolean | projects_tblFindManyArgs
    _count?: boolean | Images_tblCountOutputTypeArgs
  }

  export type images_tblGetPayload<
    S extends boolean | null | undefined | images_tblArgs,
    U = keyof S
      > = S extends true
        ? images_tbl
    : S extends undefined
    ? never
    : S extends images_tblArgs | images_tblFindManyArgs
    ?'include' extends U
    ? images_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['include'][P]>>  :
        P extends 'projects_tbl' ? Array < projects_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Images_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['select'][P]>>  :
        P extends 'projects_tbl' ? Array < projects_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Images_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof images_tbl ? images_tbl[P] : never
  } 
    : images_tbl
  : images_tbl


  type images_tblCountArgs = Merge<
    Omit<images_tblFindManyArgs, 'select' | 'include'> & {
      select?: Images_tblCountAggregateInputType | true
    }
  >

  export interface images_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Images_tbl that matches the filter.
     * @param {images_tblFindUniqueArgs} args - Arguments to find a Images_tbl
     * @example
     * // Get one Images_tbl
     * const images_tbl = await prisma.images_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends images_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, images_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'images_tbl'> extends True ? CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>> : CheckSelect<T, Prisma__images_tblClient<images_tbl | null >, Prisma__images_tblClient<images_tblGetPayload<T> | null >>

    /**
     * Find the first Images_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {images_tblFindFirstArgs} args - Arguments to find a Images_tbl
     * @example
     * // Get one Images_tbl
     * const images_tbl = await prisma.images_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends images_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, images_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'images_tbl'> extends True ? CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>> : CheckSelect<T, Prisma__images_tblClient<images_tbl | null >, Prisma__images_tblClient<images_tblGetPayload<T> | null >>

    /**
     * Find zero or more Images_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {images_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images_tbls
     * const images_tbls = await prisma.images_tbl.findMany()
     * 
     * // Get first 10 Images_tbls
     * const images_tbls = await prisma.images_tbl.findMany({ take: 10 })
     * 
     * // Only select the `img_id`
     * const images_tblWithImg_idOnly = await prisma.images_tbl.findMany({ select: { img_id: true } })
     * 
    **/
    findMany<T extends images_tblFindManyArgs>(
      args?: SelectSubset<T, images_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<images_tbl>>, PrismaPromise<Array<images_tblGetPayload<T>>>>

    /**
     * Create a Images_tbl.
     * @param {images_tblCreateArgs} args - Arguments to create a Images_tbl.
     * @example
     * // Create one Images_tbl
     * const Images_tbl = await prisma.images_tbl.create({
     *   data: {
     *     // ... data to create a Images_tbl
     *   }
     * })
     * 
    **/
    create<T extends images_tblCreateArgs>(
      args: SelectSubset<T, images_tblCreateArgs>
    ): CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>>

    /**
     * Create many Images_tbls.
     *     @param {images_tblCreateManyArgs} args - Arguments to create many Images_tbls.
     *     @example
     *     // Create many Images_tbls
     *     const images_tbl = await prisma.images_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends images_tblCreateManyArgs>(
      args?: SelectSubset<T, images_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Images_tbl.
     * @param {images_tblDeleteArgs} args - Arguments to delete one Images_tbl.
     * @example
     * // Delete one Images_tbl
     * const Images_tbl = await prisma.images_tbl.delete({
     *   where: {
     *     // ... filter to delete one Images_tbl
     *   }
     * })
     * 
    **/
    delete<T extends images_tblDeleteArgs>(
      args: SelectSubset<T, images_tblDeleteArgs>
    ): CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>>

    /**
     * Update one Images_tbl.
     * @param {images_tblUpdateArgs} args - Arguments to update one Images_tbl.
     * @example
     * // Update one Images_tbl
     * const images_tbl = await prisma.images_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends images_tblUpdateArgs>(
      args: SelectSubset<T, images_tblUpdateArgs>
    ): CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>>

    /**
     * Delete zero or more Images_tbls.
     * @param {images_tblDeleteManyArgs} args - Arguments to filter Images_tbls to delete.
     * @example
     * // Delete a few Images_tbls
     * const { count } = await prisma.images_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends images_tblDeleteManyArgs>(
      args?: SelectSubset<T, images_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {images_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images_tbls
     * const images_tbl = await prisma.images_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends images_tblUpdateManyArgs>(
      args: SelectSubset<T, images_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Images_tbl.
     * @param {images_tblUpsertArgs} args - Arguments to update or create a Images_tbl.
     * @example
     * // Update or create a Images_tbl
     * const images_tbl = await prisma.images_tbl.upsert({
     *   create: {
     *     // ... data to create a Images_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends images_tblUpsertArgs>(
      args: SelectSubset<T, images_tblUpsertArgs>
    ): CheckSelect<T, Prisma__images_tblClient<images_tbl>, Prisma__images_tblClient<images_tblGetPayload<T>>>

    /**
     * Count the number of Images_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {images_tblCountArgs} args - Arguments to filter Images_tbls to count.
     * @example
     * // Count the number of Images_tbls
     * const count = await prisma.images_tbl.count({
     *   where: {
     *     // ... the filter for the Images_tbls we want to count
     *   }
     * })
    **/
    count<T extends images_tblCountArgs>(
      args?: Subset<T, images_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Images_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Images_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Images_tblAggregateArgs>(args: Subset<T, Images_tblAggregateArgs>): PrismaPromise<GetImages_tblAggregateType<T>>

    /**
     * Group by Images_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Images_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Images_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Images_tblGroupByArgs['orderBy'] }
        : { orderBy?: Images_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Images_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImages_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for images_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__images_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    players_tbl<T extends players_tblFindManyArgs = {}>(args?: Subset<T, players_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<players_tbl>>, PrismaPromise<Array<players_tblGetPayload<T>>>>;

    projects_tbl<T extends projects_tblFindManyArgs = {}>(args?: Subset<T, projects_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<projects_tbl>>, PrismaPromise<Array<projects_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * images_tbl findUnique
   */
  export type images_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * Throw an Error if a images_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which images_tbl to fetch.
     * 
    **/
    where: images_tblWhereUniqueInput
  }


  /**
   * images_tbl findFirst
   */
  export type images_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * Throw an Error if a images_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which images_tbl to fetch.
     * 
    **/
    where?: images_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<images_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images_tbls.
     * 
    **/
    cursor?: images_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images_tbls.
     * 
    **/
    distinct?: Enumerable<Images_tblScalarFieldEnum>
  }


  /**
   * images_tbl findMany
   */
  export type images_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * Filter, which images_tbls to fetch.
     * 
    **/
    where?: images_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<images_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images_tbls.
     * 
    **/
    cursor?: images_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Images_tblScalarFieldEnum>
  }


  /**
   * images_tbl create
   */
  export type images_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * The data needed to create a images_tbl.
     * 
    **/
    data: XOR<images_tblCreateInput, images_tblUncheckedCreateInput>
  }


  /**
   * images_tbl createMany
   */
  export type images_tblCreateManyArgs = {
    /**
     * The data used to create many images_tbls.
     * 
    **/
    data: Enumerable<images_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * images_tbl update
   */
  export type images_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * The data needed to update a images_tbl.
     * 
    **/
    data: XOR<images_tblUpdateInput, images_tblUncheckedUpdateInput>
    /**
     * Choose, which images_tbl to update.
     * 
    **/
    where: images_tblWhereUniqueInput
  }


  /**
   * images_tbl updateMany
   */
  export type images_tblUpdateManyArgs = {
    /**
     * The data used to update images_tbls.
     * 
    **/
    data: XOR<images_tblUpdateManyMutationInput, images_tblUncheckedUpdateManyInput>
    /**
     * Filter which images_tbls to update
     * 
    **/
    where?: images_tblWhereInput
  }


  /**
   * images_tbl upsert
   */
  export type images_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * The filter to search for the images_tbl to update in case it exists.
     * 
    **/
    where: images_tblWhereUniqueInput
    /**
     * In case the images_tbl found by the `where` argument doesn't exist, create a new images_tbl with this data.
     * 
    **/
    create: XOR<images_tblCreateInput, images_tblUncheckedCreateInput>
    /**
     * In case the images_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<images_tblUpdateInput, images_tblUncheckedUpdateInput>
  }


  /**
   * images_tbl delete
   */
  export type images_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
    /**
     * Filter which images_tbl to delete.
     * 
    **/
    where: images_tblWhereUniqueInput
  }


  /**
   * images_tbl deleteMany
   */
  export type images_tblDeleteManyArgs = {
    /**
     * Filter which images_tbls to delete
     * 
    **/
    where?: images_tblWhereInput
  }


  /**
   * images_tbl without action
   */
  export type images_tblArgs = {
    /**
     * Select specific fields to fetch from the images_tbl
     * 
    **/
    select?: images_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: images_tblInclude | null
  }



  /**
   * Model players_tbl
   */


  export type AggregatePlayers_tbl = {
    _count: Players_tblCountAggregateOutputType | null
    _avg: Players_tblAvgAggregateOutputType | null
    _sum: Players_tblSumAggregateOutputType | null
    _min: Players_tblMinAggregateOutputType | null
    _max: Players_tblMaxAggregateOutputType | null
  }

  export type Players_tblAvgAggregateOutputType = {
    ply_id: number | null
    ply_role: number | null
    ply_avatar: number | null
    ply_user: number | null
  }

  export type Players_tblSumAggregateOutputType = {
    ply_id: number | null
    ply_role: number | null
    ply_avatar: number | null
    ply_user: number | null
  }

  export type Players_tblMinAggregateOutputType = {
    ply_id: number | null
    ply_role: number | null
    ply_avatar: number | null
    ply_user: number | null
  }

  export type Players_tblMaxAggregateOutputType = {
    ply_id: number | null
    ply_role: number | null
    ply_avatar: number | null
    ply_user: number | null
  }

  export type Players_tblCountAggregateOutputType = {
    ply_id: number
    ply_role: number
    ply_avatar: number
    ply_user: number
    _all: number
  }


  export type Players_tblAvgAggregateInputType = {
    ply_id?: true
    ply_role?: true
    ply_avatar?: true
    ply_user?: true
  }

  export type Players_tblSumAggregateInputType = {
    ply_id?: true
    ply_role?: true
    ply_avatar?: true
    ply_user?: true
  }

  export type Players_tblMinAggregateInputType = {
    ply_id?: true
    ply_role?: true
    ply_avatar?: true
    ply_user?: true
  }

  export type Players_tblMaxAggregateInputType = {
    ply_id?: true
    ply_role?: true
    ply_avatar?: true
    ply_user?: true
  }

  export type Players_tblCountAggregateInputType = {
    ply_id?: true
    ply_role?: true
    ply_avatar?: true
    ply_user?: true
    _all?: true
  }

  export type Players_tblAggregateArgs = {
    /**
     * Filter which players_tbl to aggregate.
     * 
    **/
    where?: players_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of players_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<players_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: players_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` players_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` players_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned players_tbls
    **/
    _count?: true | Players_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Players_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Players_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Players_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Players_tblMaxAggregateInputType
  }

  export type GetPlayers_tblAggregateType<T extends Players_tblAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayers_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayers_tbl[P]>
      : GetScalarType<T[P], AggregatePlayers_tbl[P]>
  }




  export type Players_tblGroupByArgs = {
    where?: players_tblWhereInput
    orderBy?: Enumerable<players_tblOrderByWithAggregationInput>
    by: Array<Players_tblScalarFieldEnum>
    having?: players_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Players_tblCountAggregateInputType | true
    _avg?: Players_tblAvgAggregateInputType
    _sum?: Players_tblSumAggregateInputType
    _min?: Players_tblMinAggregateInputType
    _max?: Players_tblMaxAggregateInputType
  }


  export type Players_tblGroupByOutputType = {
    ply_id: number
    ply_role: number
    ply_avatar: number
    ply_user: number
    _count: Players_tblCountAggregateOutputType | null
    _avg: Players_tblAvgAggregateOutputType | null
    _sum: Players_tblSumAggregateOutputType | null
    _min: Players_tblMinAggregateOutputType | null
    _max: Players_tblMaxAggregateOutputType | null
  }

  type GetPlayers_tblGroupByPayload<T extends Players_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Players_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Players_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Players_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Players_tblGroupByOutputType[P]>
        }
      >
    >


  export type players_tblSelect = {
    ply_id?: boolean
    ply_role?: boolean
    ply_avatar?: boolean
    ply_user?: boolean
    images_tbl?: boolean | images_tblArgs
    roles_tbl?: boolean | roles_tblArgs
    users_tbl?: boolean | users_tblArgs
    data_tbl?: boolean | data_tblFindManyArgs
    projects_tbl?: boolean | projects_tblFindManyArgs
    _count?: boolean | Players_tblCountOutputTypeArgs
  }

  export type players_tblInclude = {
    images_tbl?: boolean | images_tblArgs
    roles_tbl?: boolean | roles_tblArgs
    users_tbl?: boolean | users_tblArgs
    data_tbl?: boolean | data_tblFindManyArgs
    projects_tbl?: boolean | projects_tblFindManyArgs
    _count?: boolean | Players_tblCountOutputTypeArgs
  }

  export type players_tblGetPayload<
    S extends boolean | null | undefined | players_tblArgs,
    U = keyof S
      > = S extends true
        ? players_tbl
    : S extends undefined
    ? never
    : S extends players_tblArgs | players_tblFindManyArgs
    ?'include' extends U
    ? players_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'images_tbl' ? images_tblGetPayload<S['include'][P]> :
        P extends 'roles_tbl' ? roles_tblGetPayload<S['include'][P]> :
        P extends 'users_tbl' ? users_tblGetPayload<S['include'][P]> :
        P extends 'data_tbl' ? Array < data_tblGetPayload<S['include'][P]>>  :
        P extends 'projects_tbl' ? Array < projects_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Players_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'images_tbl' ? images_tblGetPayload<S['select'][P]> :
        P extends 'roles_tbl' ? roles_tblGetPayload<S['select'][P]> :
        P extends 'users_tbl' ? users_tblGetPayload<S['select'][P]> :
        P extends 'data_tbl' ? Array < data_tblGetPayload<S['select'][P]>>  :
        P extends 'projects_tbl' ? Array < projects_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Players_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof players_tbl ? players_tbl[P] : never
  } 
    : players_tbl
  : players_tbl


  type players_tblCountArgs = Merge<
    Omit<players_tblFindManyArgs, 'select' | 'include'> & {
      select?: Players_tblCountAggregateInputType | true
    }
  >

  export interface players_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Players_tbl that matches the filter.
     * @param {players_tblFindUniqueArgs} args - Arguments to find a Players_tbl
     * @example
     * // Get one Players_tbl
     * const players_tbl = await prisma.players_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends players_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, players_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'players_tbl'> extends True ? CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>> : CheckSelect<T, Prisma__players_tblClient<players_tbl | null >, Prisma__players_tblClient<players_tblGetPayload<T> | null >>

    /**
     * Find the first Players_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {players_tblFindFirstArgs} args - Arguments to find a Players_tbl
     * @example
     * // Get one Players_tbl
     * const players_tbl = await prisma.players_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends players_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, players_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'players_tbl'> extends True ? CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>> : CheckSelect<T, Prisma__players_tblClient<players_tbl | null >, Prisma__players_tblClient<players_tblGetPayload<T> | null >>

    /**
     * Find zero or more Players_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {players_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players_tbls
     * const players_tbls = await prisma.players_tbl.findMany()
     * 
     * // Get first 10 Players_tbls
     * const players_tbls = await prisma.players_tbl.findMany({ take: 10 })
     * 
     * // Only select the `ply_id`
     * const players_tblWithPly_idOnly = await prisma.players_tbl.findMany({ select: { ply_id: true } })
     * 
    **/
    findMany<T extends players_tblFindManyArgs>(
      args?: SelectSubset<T, players_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<players_tbl>>, PrismaPromise<Array<players_tblGetPayload<T>>>>

    /**
     * Create a Players_tbl.
     * @param {players_tblCreateArgs} args - Arguments to create a Players_tbl.
     * @example
     * // Create one Players_tbl
     * const Players_tbl = await prisma.players_tbl.create({
     *   data: {
     *     // ... data to create a Players_tbl
     *   }
     * })
     * 
    **/
    create<T extends players_tblCreateArgs>(
      args: SelectSubset<T, players_tblCreateArgs>
    ): CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>>

    /**
     * Create many Players_tbls.
     *     @param {players_tblCreateManyArgs} args - Arguments to create many Players_tbls.
     *     @example
     *     // Create many Players_tbls
     *     const players_tbl = await prisma.players_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends players_tblCreateManyArgs>(
      args?: SelectSubset<T, players_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Players_tbl.
     * @param {players_tblDeleteArgs} args - Arguments to delete one Players_tbl.
     * @example
     * // Delete one Players_tbl
     * const Players_tbl = await prisma.players_tbl.delete({
     *   where: {
     *     // ... filter to delete one Players_tbl
     *   }
     * })
     * 
    **/
    delete<T extends players_tblDeleteArgs>(
      args: SelectSubset<T, players_tblDeleteArgs>
    ): CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>>

    /**
     * Update one Players_tbl.
     * @param {players_tblUpdateArgs} args - Arguments to update one Players_tbl.
     * @example
     * // Update one Players_tbl
     * const players_tbl = await prisma.players_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends players_tblUpdateArgs>(
      args: SelectSubset<T, players_tblUpdateArgs>
    ): CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>>

    /**
     * Delete zero or more Players_tbls.
     * @param {players_tblDeleteManyArgs} args - Arguments to filter Players_tbls to delete.
     * @example
     * // Delete a few Players_tbls
     * const { count } = await prisma.players_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends players_tblDeleteManyArgs>(
      args?: SelectSubset<T, players_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {players_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players_tbls
     * const players_tbl = await prisma.players_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends players_tblUpdateManyArgs>(
      args: SelectSubset<T, players_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Players_tbl.
     * @param {players_tblUpsertArgs} args - Arguments to update or create a Players_tbl.
     * @example
     * // Update or create a Players_tbl
     * const players_tbl = await prisma.players_tbl.upsert({
     *   create: {
     *     // ... data to create a Players_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Players_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends players_tblUpsertArgs>(
      args: SelectSubset<T, players_tblUpsertArgs>
    ): CheckSelect<T, Prisma__players_tblClient<players_tbl>, Prisma__players_tblClient<players_tblGetPayload<T>>>

    /**
     * Count the number of Players_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {players_tblCountArgs} args - Arguments to filter Players_tbls to count.
     * @example
     * // Count the number of Players_tbls
     * const count = await prisma.players_tbl.count({
     *   where: {
     *     // ... the filter for the Players_tbls we want to count
     *   }
     * })
    **/
    count<T extends players_tblCountArgs>(
      args?: Subset<T, players_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Players_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Players_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Players_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Players_tblAggregateArgs>(args: Subset<T, Players_tblAggregateArgs>): PrismaPromise<GetPlayers_tblAggregateType<T>>

    /**
     * Group by Players_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Players_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Players_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Players_tblGroupByArgs['orderBy'] }
        : { orderBy?: Players_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Players_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayers_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for players_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__players_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    images_tbl<T extends images_tblArgs = {}>(args?: Subset<T, images_tblArgs>): CheckSelect<T, Prisma__images_tblClient<images_tbl | null >, Prisma__images_tblClient<images_tblGetPayload<T> | null >>;

    roles_tbl<T extends roles_tblArgs = {}>(args?: Subset<T, roles_tblArgs>): CheckSelect<T, Prisma__roles_tblClient<roles_tbl | null >, Prisma__roles_tblClient<roles_tblGetPayload<T> | null >>;

    users_tbl<T extends users_tblArgs = {}>(args?: Subset<T, users_tblArgs>): CheckSelect<T, Prisma__users_tblClient<users_tbl | null >, Prisma__users_tblClient<users_tblGetPayload<T> | null >>;

    data_tbl<T extends data_tblFindManyArgs = {}>(args?: Subset<T, data_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<data_tbl>>, PrismaPromise<Array<data_tblGetPayload<T>>>>;

    projects_tbl<T extends projects_tblFindManyArgs = {}>(args?: Subset<T, projects_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<projects_tbl>>, PrismaPromise<Array<projects_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * players_tbl findUnique
   */
  export type players_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * Throw an Error if a players_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which players_tbl to fetch.
     * 
    **/
    where: players_tblWhereUniqueInput
  }


  /**
   * players_tbl findFirst
   */
  export type players_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * Throw an Error if a players_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which players_tbl to fetch.
     * 
    **/
    where?: players_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of players_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<players_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for players_tbls.
     * 
    **/
    cursor?: players_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` players_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` players_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of players_tbls.
     * 
    **/
    distinct?: Enumerable<Players_tblScalarFieldEnum>
  }


  /**
   * players_tbl findMany
   */
  export type players_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * Filter, which players_tbls to fetch.
     * 
    **/
    where?: players_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of players_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<players_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing players_tbls.
     * 
    **/
    cursor?: players_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` players_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` players_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Players_tblScalarFieldEnum>
  }


  /**
   * players_tbl create
   */
  export type players_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * The data needed to create a players_tbl.
     * 
    **/
    data: XOR<players_tblCreateInput, players_tblUncheckedCreateInput>
  }


  /**
   * players_tbl createMany
   */
  export type players_tblCreateManyArgs = {
    /**
     * The data used to create many players_tbls.
     * 
    **/
    data: Enumerable<players_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * players_tbl update
   */
  export type players_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * The data needed to update a players_tbl.
     * 
    **/
    data: XOR<players_tblUpdateInput, players_tblUncheckedUpdateInput>
    /**
     * Choose, which players_tbl to update.
     * 
    **/
    where: players_tblWhereUniqueInput
  }


  /**
   * players_tbl updateMany
   */
  export type players_tblUpdateManyArgs = {
    /**
     * The data used to update players_tbls.
     * 
    **/
    data: XOR<players_tblUpdateManyMutationInput, players_tblUncheckedUpdateManyInput>
    /**
     * Filter which players_tbls to update
     * 
    **/
    where?: players_tblWhereInput
  }


  /**
   * players_tbl upsert
   */
  export type players_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * The filter to search for the players_tbl to update in case it exists.
     * 
    **/
    where: players_tblWhereUniqueInput
    /**
     * In case the players_tbl found by the `where` argument doesn't exist, create a new players_tbl with this data.
     * 
    **/
    create: XOR<players_tblCreateInput, players_tblUncheckedCreateInput>
    /**
     * In case the players_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<players_tblUpdateInput, players_tblUncheckedUpdateInput>
  }


  /**
   * players_tbl delete
   */
  export type players_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
    /**
     * Filter which players_tbl to delete.
     * 
    **/
    where: players_tblWhereUniqueInput
  }


  /**
   * players_tbl deleteMany
   */
  export type players_tblDeleteManyArgs = {
    /**
     * Filter which players_tbls to delete
     * 
    **/
    where?: players_tblWhereInput
  }


  /**
   * players_tbl without action
   */
  export type players_tblArgs = {
    /**
     * Select specific fields to fetch from the players_tbl
     * 
    **/
    select?: players_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: players_tblInclude | null
  }



  /**
   * Model plugins_tbl
   */


  export type AggregatePlugins_tbl = {
    _count: Plugins_tblCountAggregateOutputType | null
    _avg: Plugins_tblAvgAggregateOutputType | null
    _sum: Plugins_tblSumAggregateOutputType | null
    _min: Plugins_tblMinAggregateOutputType | null
    _max: Plugins_tblMaxAggregateOutputType | null
  }

  export type Plugins_tblAvgAggregateOutputType = {
    plg_id: number | null
    plg_tool: number | null
  }

  export type Plugins_tblSumAggregateOutputType = {
    plg_id: number | null
    plg_tool: number | null
  }

  export type Plugins_tblMinAggregateOutputType = {
    plg_id: number | null
    plg_name: string | null
    plg_description: string | null
    plg_path: string | null
    plg_tool: number | null
  }

  export type Plugins_tblMaxAggregateOutputType = {
    plg_id: number | null
    plg_name: string | null
    plg_description: string | null
    plg_path: string | null
    plg_tool: number | null
  }

  export type Plugins_tblCountAggregateOutputType = {
    plg_id: number
    plg_name: number
    plg_description: number
    plg_path: number
    plg_tool: number
    _all: number
  }


  export type Plugins_tblAvgAggregateInputType = {
    plg_id?: true
    plg_tool?: true
  }

  export type Plugins_tblSumAggregateInputType = {
    plg_id?: true
    plg_tool?: true
  }

  export type Plugins_tblMinAggregateInputType = {
    plg_id?: true
    plg_name?: true
    plg_description?: true
    plg_path?: true
    plg_tool?: true
  }

  export type Plugins_tblMaxAggregateInputType = {
    plg_id?: true
    plg_name?: true
    plg_description?: true
    plg_path?: true
    plg_tool?: true
  }

  export type Plugins_tblCountAggregateInputType = {
    plg_id?: true
    plg_name?: true
    plg_description?: true
    plg_path?: true
    plg_tool?: true
    _all?: true
  }

  export type Plugins_tblAggregateArgs = {
    /**
     * Filter which plugins_tbl to aggregate.
     * 
    **/
    where?: plugins_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plugins_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<plugins_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: plugins_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plugins_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plugins_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned plugins_tbls
    **/
    _count?: true | Plugins_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Plugins_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Plugins_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Plugins_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Plugins_tblMaxAggregateInputType
  }

  export type GetPlugins_tblAggregateType<T extends Plugins_tblAggregateArgs> = {
        [P in keyof T & keyof AggregatePlugins_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlugins_tbl[P]>
      : GetScalarType<T[P], AggregatePlugins_tbl[P]>
  }




  export type Plugins_tblGroupByArgs = {
    where?: plugins_tblWhereInput
    orderBy?: Enumerable<plugins_tblOrderByWithAggregationInput>
    by: Array<Plugins_tblScalarFieldEnum>
    having?: plugins_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Plugins_tblCountAggregateInputType | true
    _avg?: Plugins_tblAvgAggregateInputType
    _sum?: Plugins_tblSumAggregateInputType
    _min?: Plugins_tblMinAggregateInputType
    _max?: Plugins_tblMaxAggregateInputType
  }


  export type Plugins_tblGroupByOutputType = {
    plg_id: number
    plg_name: string
    plg_description: string
    plg_path: string
    plg_tool: number
    _count: Plugins_tblCountAggregateOutputType | null
    _avg: Plugins_tblAvgAggregateOutputType | null
    _sum: Plugins_tblSumAggregateOutputType | null
    _min: Plugins_tblMinAggregateOutputType | null
    _max: Plugins_tblMaxAggregateOutputType | null
  }

  type GetPlugins_tblGroupByPayload<T extends Plugins_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Plugins_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Plugins_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Plugins_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Plugins_tblGroupByOutputType[P]>
        }
      >
    >


  export type plugins_tblSelect = {
    plg_id?: boolean
    plg_name?: boolean
    plg_description?: boolean
    plg_path?: boolean
    plg_tool?: boolean
    tools_tbl?: boolean | tools_tblArgs
  }

  export type plugins_tblInclude = {
    tools_tbl?: boolean | tools_tblArgs
  }

  export type plugins_tblGetPayload<
    S extends boolean | null | undefined | plugins_tblArgs,
    U = keyof S
      > = S extends true
        ? plugins_tbl
    : S extends undefined
    ? never
    : S extends plugins_tblArgs | plugins_tblFindManyArgs
    ?'include' extends U
    ? plugins_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tools_tbl' ? tools_tblGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tools_tbl' ? tools_tblGetPayload<S['select'][P]> :  P extends keyof plugins_tbl ? plugins_tbl[P] : never
  } 
    : plugins_tbl
  : plugins_tbl


  type plugins_tblCountArgs = Merge<
    Omit<plugins_tblFindManyArgs, 'select' | 'include'> & {
      select?: Plugins_tblCountAggregateInputType | true
    }
  >

  export interface plugins_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Plugins_tbl that matches the filter.
     * @param {plugins_tblFindUniqueArgs} args - Arguments to find a Plugins_tbl
     * @example
     * // Get one Plugins_tbl
     * const plugins_tbl = await prisma.plugins_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends plugins_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, plugins_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'plugins_tbl'> extends True ? CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>> : CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl | null >, Prisma__plugins_tblClient<plugins_tblGetPayload<T> | null >>

    /**
     * Find the first Plugins_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plugins_tblFindFirstArgs} args - Arguments to find a Plugins_tbl
     * @example
     * // Get one Plugins_tbl
     * const plugins_tbl = await prisma.plugins_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends plugins_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, plugins_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'plugins_tbl'> extends True ? CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>> : CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl | null >, Prisma__plugins_tblClient<plugins_tblGetPayload<T> | null >>

    /**
     * Find zero or more Plugins_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plugins_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plugins_tbls
     * const plugins_tbls = await prisma.plugins_tbl.findMany()
     * 
     * // Get first 10 Plugins_tbls
     * const plugins_tbls = await prisma.plugins_tbl.findMany({ take: 10 })
     * 
     * // Only select the `plg_id`
     * const plugins_tblWithPlg_idOnly = await prisma.plugins_tbl.findMany({ select: { plg_id: true } })
     * 
    **/
    findMany<T extends plugins_tblFindManyArgs>(
      args?: SelectSubset<T, plugins_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<plugins_tbl>>, PrismaPromise<Array<plugins_tblGetPayload<T>>>>

    /**
     * Create a Plugins_tbl.
     * @param {plugins_tblCreateArgs} args - Arguments to create a Plugins_tbl.
     * @example
     * // Create one Plugins_tbl
     * const Plugins_tbl = await prisma.plugins_tbl.create({
     *   data: {
     *     // ... data to create a Plugins_tbl
     *   }
     * })
     * 
    **/
    create<T extends plugins_tblCreateArgs>(
      args: SelectSubset<T, plugins_tblCreateArgs>
    ): CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>>

    /**
     * Create many Plugins_tbls.
     *     @param {plugins_tblCreateManyArgs} args - Arguments to create many Plugins_tbls.
     *     @example
     *     // Create many Plugins_tbls
     *     const plugins_tbl = await prisma.plugins_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends plugins_tblCreateManyArgs>(
      args?: SelectSubset<T, plugins_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Plugins_tbl.
     * @param {plugins_tblDeleteArgs} args - Arguments to delete one Plugins_tbl.
     * @example
     * // Delete one Plugins_tbl
     * const Plugins_tbl = await prisma.plugins_tbl.delete({
     *   where: {
     *     // ... filter to delete one Plugins_tbl
     *   }
     * })
     * 
    **/
    delete<T extends plugins_tblDeleteArgs>(
      args: SelectSubset<T, plugins_tblDeleteArgs>
    ): CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>>

    /**
     * Update one Plugins_tbl.
     * @param {plugins_tblUpdateArgs} args - Arguments to update one Plugins_tbl.
     * @example
     * // Update one Plugins_tbl
     * const plugins_tbl = await prisma.plugins_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends plugins_tblUpdateArgs>(
      args: SelectSubset<T, plugins_tblUpdateArgs>
    ): CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>>

    /**
     * Delete zero or more Plugins_tbls.
     * @param {plugins_tblDeleteManyArgs} args - Arguments to filter Plugins_tbls to delete.
     * @example
     * // Delete a few Plugins_tbls
     * const { count } = await prisma.plugins_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends plugins_tblDeleteManyArgs>(
      args?: SelectSubset<T, plugins_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plugins_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plugins_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plugins_tbls
     * const plugins_tbl = await prisma.plugins_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends plugins_tblUpdateManyArgs>(
      args: SelectSubset<T, plugins_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Plugins_tbl.
     * @param {plugins_tblUpsertArgs} args - Arguments to update or create a Plugins_tbl.
     * @example
     * // Update or create a Plugins_tbl
     * const plugins_tbl = await prisma.plugins_tbl.upsert({
     *   create: {
     *     // ... data to create a Plugins_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plugins_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends plugins_tblUpsertArgs>(
      args: SelectSubset<T, plugins_tblUpsertArgs>
    ): CheckSelect<T, Prisma__plugins_tblClient<plugins_tbl>, Prisma__plugins_tblClient<plugins_tblGetPayload<T>>>

    /**
     * Count the number of Plugins_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {plugins_tblCountArgs} args - Arguments to filter Plugins_tbls to count.
     * @example
     * // Count the number of Plugins_tbls
     * const count = await prisma.plugins_tbl.count({
     *   where: {
     *     // ... the filter for the Plugins_tbls we want to count
     *   }
     * })
    **/
    count<T extends plugins_tblCountArgs>(
      args?: Subset<T, plugins_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Plugins_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plugins_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Plugins_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Plugins_tblAggregateArgs>(args: Subset<T, Plugins_tblAggregateArgs>): PrismaPromise<GetPlugins_tblAggregateType<T>>

    /**
     * Group by Plugins_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Plugins_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Plugins_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Plugins_tblGroupByArgs['orderBy'] }
        : { orderBy?: Plugins_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Plugins_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlugins_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for plugins_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__plugins_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tools_tbl<T extends tools_tblArgs = {}>(args?: Subset<T, tools_tblArgs>): CheckSelect<T, Prisma__tools_tblClient<tools_tbl | null >, Prisma__tools_tblClient<tools_tblGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * plugins_tbl findUnique
   */
  export type plugins_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * Throw an Error if a plugins_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which plugins_tbl to fetch.
     * 
    **/
    where: plugins_tblWhereUniqueInput
  }


  /**
   * plugins_tbl findFirst
   */
  export type plugins_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * Throw an Error if a plugins_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which plugins_tbl to fetch.
     * 
    **/
    where?: plugins_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plugins_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<plugins_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for plugins_tbls.
     * 
    **/
    cursor?: plugins_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plugins_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plugins_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of plugins_tbls.
     * 
    **/
    distinct?: Enumerable<Plugins_tblScalarFieldEnum>
  }


  /**
   * plugins_tbl findMany
   */
  export type plugins_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * Filter, which plugins_tbls to fetch.
     * 
    **/
    where?: plugins_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of plugins_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<plugins_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing plugins_tbls.
     * 
    **/
    cursor?: plugins_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` plugins_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` plugins_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Plugins_tblScalarFieldEnum>
  }


  /**
   * plugins_tbl create
   */
  export type plugins_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * The data needed to create a plugins_tbl.
     * 
    **/
    data: XOR<plugins_tblCreateInput, plugins_tblUncheckedCreateInput>
  }


  /**
   * plugins_tbl createMany
   */
  export type plugins_tblCreateManyArgs = {
    /**
     * The data used to create many plugins_tbls.
     * 
    **/
    data: Enumerable<plugins_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * plugins_tbl update
   */
  export type plugins_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * The data needed to update a plugins_tbl.
     * 
    **/
    data: XOR<plugins_tblUpdateInput, plugins_tblUncheckedUpdateInput>
    /**
     * Choose, which plugins_tbl to update.
     * 
    **/
    where: plugins_tblWhereUniqueInput
  }


  /**
   * plugins_tbl updateMany
   */
  export type plugins_tblUpdateManyArgs = {
    /**
     * The data used to update plugins_tbls.
     * 
    **/
    data: XOR<plugins_tblUpdateManyMutationInput, plugins_tblUncheckedUpdateManyInput>
    /**
     * Filter which plugins_tbls to update
     * 
    **/
    where?: plugins_tblWhereInput
  }


  /**
   * plugins_tbl upsert
   */
  export type plugins_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * The filter to search for the plugins_tbl to update in case it exists.
     * 
    **/
    where: plugins_tblWhereUniqueInput
    /**
     * In case the plugins_tbl found by the `where` argument doesn't exist, create a new plugins_tbl with this data.
     * 
    **/
    create: XOR<plugins_tblCreateInput, plugins_tblUncheckedCreateInput>
    /**
     * In case the plugins_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<plugins_tblUpdateInput, plugins_tblUncheckedUpdateInput>
  }


  /**
   * plugins_tbl delete
   */
  export type plugins_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
    /**
     * Filter which plugins_tbl to delete.
     * 
    **/
    where: plugins_tblWhereUniqueInput
  }


  /**
   * plugins_tbl deleteMany
   */
  export type plugins_tblDeleteManyArgs = {
    /**
     * Filter which plugins_tbls to delete
     * 
    **/
    where?: plugins_tblWhereInput
  }


  /**
   * plugins_tbl without action
   */
  export type plugins_tblArgs = {
    /**
     * Select specific fields to fetch from the plugins_tbl
     * 
    **/
    select?: plugins_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: plugins_tblInclude | null
  }



  /**
   * Model projects_tbl
   */


  export type AggregateProjects_tbl = {
    _count: Projects_tblCountAggregateOutputType | null
    _avg: Projects_tblAvgAggregateOutputType | null
    _sum: Projects_tblSumAggregateOutputType | null
    _min: Projects_tblMinAggregateOutputType | null
    _max: Projects_tblMaxAggregateOutputType | null
  }

  export type Projects_tblAvgAggregateOutputType = {
    prj_id: number | null
    prj_description: number | null
    prj_owner: number | null
    prj_avatar: number | null
  }

  export type Projects_tblSumAggregateOutputType = {
    prj_id: number | null
    prj_description: number | null
    prj_owner: number | null
    prj_avatar: number | null
  }

  export type Projects_tblMinAggregateOutputType = {
    prj_id: number | null
    proj_name: string | null
    prj_description: number | null
    prj_owner: number | null
    prj_avatar: number | null
  }

  export type Projects_tblMaxAggregateOutputType = {
    prj_id: number | null
    proj_name: string | null
    prj_description: number | null
    prj_owner: number | null
    prj_avatar: number | null
  }

  export type Projects_tblCountAggregateOutputType = {
    prj_id: number
    proj_name: number
    prj_description: number
    prj_config: number
    prj_owner: number
    prj_avatar: number
    _all: number
  }


  export type Projects_tblAvgAggregateInputType = {
    prj_id?: true
    prj_description?: true
    prj_owner?: true
    prj_avatar?: true
  }

  export type Projects_tblSumAggregateInputType = {
    prj_id?: true
    prj_description?: true
    prj_owner?: true
    prj_avatar?: true
  }

  export type Projects_tblMinAggregateInputType = {
    prj_id?: true
    proj_name?: true
    prj_description?: true
    prj_owner?: true
    prj_avatar?: true
  }

  export type Projects_tblMaxAggregateInputType = {
    prj_id?: true
    proj_name?: true
    prj_description?: true
    prj_owner?: true
    prj_avatar?: true
  }

  export type Projects_tblCountAggregateInputType = {
    prj_id?: true
    proj_name?: true
    prj_description?: true
    prj_config?: true
    prj_owner?: true
    prj_avatar?: true
    _all?: true
  }

  export type Projects_tblAggregateArgs = {
    /**
     * Filter which projects_tbl to aggregate.
     * 
    **/
    where?: projects_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<projects_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: projects_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projects_tbls
    **/
    _count?: true | Projects_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Projects_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Projects_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Projects_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Projects_tblMaxAggregateInputType
  }

  export type GetProjects_tblAggregateType<T extends Projects_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects_tbl[P]>
      : GetScalarType<T[P], AggregateProjects_tbl[P]>
  }




  export type Projects_tblGroupByArgs = {
    where?: projects_tblWhereInput
    orderBy?: Enumerable<projects_tblOrderByWithAggregationInput>
    by: Array<Projects_tblScalarFieldEnum>
    having?: projects_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Projects_tblCountAggregateInputType | true
    _avg?: Projects_tblAvgAggregateInputType
    _sum?: Projects_tblSumAggregateInputType
    _min?: Projects_tblMinAggregateInputType
    _max?: Projects_tblMaxAggregateInputType
  }


  export type Projects_tblGroupByOutputType = {
    prj_id: number
    proj_name: string
    prj_description: number
    prj_config: JsonValue
    prj_owner: number
    prj_avatar: number
    _count: Projects_tblCountAggregateOutputType | null
    _avg: Projects_tblAvgAggregateOutputType | null
    _sum: Projects_tblSumAggregateOutputType | null
    _min: Projects_tblMinAggregateOutputType | null
    _max: Projects_tblMaxAggregateOutputType | null
  }

  type GetProjects_tblGroupByPayload<T extends Projects_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Projects_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Projects_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Projects_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Projects_tblGroupByOutputType[P]>
        }
      >
    >


  export type projects_tblSelect = {
    prj_id?: boolean
    proj_name?: boolean
    prj_description?: boolean
    prj_config?: boolean
    prj_owner?: boolean
    prj_avatar?: boolean
    images_tbl?: boolean | images_tblArgs
    players_tbl?: boolean | players_tblArgs
    tools_tbl?: boolean | tools_tblFindManyArgs
    _count?: boolean | Projects_tblCountOutputTypeArgs
  }

  export type projects_tblInclude = {
    images_tbl?: boolean | images_tblArgs
    players_tbl?: boolean | players_tblArgs
    tools_tbl?: boolean | tools_tblFindManyArgs
    _count?: boolean | Projects_tblCountOutputTypeArgs
  }

  export type projects_tblGetPayload<
    S extends boolean | null | undefined | projects_tblArgs,
    U = keyof S
      > = S extends true
        ? projects_tbl
    : S extends undefined
    ? never
    : S extends projects_tblArgs | projects_tblFindManyArgs
    ?'include' extends U
    ? projects_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'images_tbl' ? images_tblGetPayload<S['include'][P]> :
        P extends 'players_tbl' ? players_tblGetPayload<S['include'][P]> :
        P extends 'tools_tbl' ? Array < tools_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Projects_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'images_tbl' ? images_tblGetPayload<S['select'][P]> :
        P extends 'players_tbl' ? players_tblGetPayload<S['select'][P]> :
        P extends 'tools_tbl' ? Array < tools_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Projects_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof projects_tbl ? projects_tbl[P] : never
  } 
    : projects_tbl
  : projects_tbl


  type projects_tblCountArgs = Merge<
    Omit<projects_tblFindManyArgs, 'select' | 'include'> & {
      select?: Projects_tblCountAggregateInputType | true
    }
  >

  export interface projects_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Projects_tbl that matches the filter.
     * @param {projects_tblFindUniqueArgs} args - Arguments to find a Projects_tbl
     * @example
     * // Get one Projects_tbl
     * const projects_tbl = await prisma.projects_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends projects_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, projects_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'projects_tbl'> extends True ? CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>> : CheckSelect<T, Prisma__projects_tblClient<projects_tbl | null >, Prisma__projects_tblClient<projects_tblGetPayload<T> | null >>

    /**
     * Find the first Projects_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projects_tblFindFirstArgs} args - Arguments to find a Projects_tbl
     * @example
     * // Get one Projects_tbl
     * const projects_tbl = await prisma.projects_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends projects_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, projects_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'projects_tbl'> extends True ? CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>> : CheckSelect<T, Prisma__projects_tblClient<projects_tbl | null >, Prisma__projects_tblClient<projects_tblGetPayload<T> | null >>

    /**
     * Find zero or more Projects_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projects_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects_tbls
     * const projects_tbls = await prisma.projects_tbl.findMany()
     * 
     * // Get first 10 Projects_tbls
     * const projects_tbls = await prisma.projects_tbl.findMany({ take: 10 })
     * 
     * // Only select the `prj_id`
     * const projects_tblWithPrj_idOnly = await prisma.projects_tbl.findMany({ select: { prj_id: true } })
     * 
    **/
    findMany<T extends projects_tblFindManyArgs>(
      args?: SelectSubset<T, projects_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<projects_tbl>>, PrismaPromise<Array<projects_tblGetPayload<T>>>>

    /**
     * Create a Projects_tbl.
     * @param {projects_tblCreateArgs} args - Arguments to create a Projects_tbl.
     * @example
     * // Create one Projects_tbl
     * const Projects_tbl = await prisma.projects_tbl.create({
     *   data: {
     *     // ... data to create a Projects_tbl
     *   }
     * })
     * 
    **/
    create<T extends projects_tblCreateArgs>(
      args: SelectSubset<T, projects_tblCreateArgs>
    ): CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>>

    /**
     * Create many Projects_tbls.
     *     @param {projects_tblCreateManyArgs} args - Arguments to create many Projects_tbls.
     *     @example
     *     // Create many Projects_tbls
     *     const projects_tbl = await prisma.projects_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends projects_tblCreateManyArgs>(
      args?: SelectSubset<T, projects_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Projects_tbl.
     * @param {projects_tblDeleteArgs} args - Arguments to delete one Projects_tbl.
     * @example
     * // Delete one Projects_tbl
     * const Projects_tbl = await prisma.projects_tbl.delete({
     *   where: {
     *     // ... filter to delete one Projects_tbl
     *   }
     * })
     * 
    **/
    delete<T extends projects_tblDeleteArgs>(
      args: SelectSubset<T, projects_tblDeleteArgs>
    ): CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>>

    /**
     * Update one Projects_tbl.
     * @param {projects_tblUpdateArgs} args - Arguments to update one Projects_tbl.
     * @example
     * // Update one Projects_tbl
     * const projects_tbl = await prisma.projects_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends projects_tblUpdateArgs>(
      args: SelectSubset<T, projects_tblUpdateArgs>
    ): CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>>

    /**
     * Delete zero or more Projects_tbls.
     * @param {projects_tblDeleteManyArgs} args - Arguments to filter Projects_tbls to delete.
     * @example
     * // Delete a few Projects_tbls
     * const { count } = await prisma.projects_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends projects_tblDeleteManyArgs>(
      args?: SelectSubset<T, projects_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projects_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects_tbls
     * const projects_tbl = await prisma.projects_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends projects_tblUpdateManyArgs>(
      args: SelectSubset<T, projects_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects_tbl.
     * @param {projects_tblUpsertArgs} args - Arguments to update or create a Projects_tbl.
     * @example
     * // Update or create a Projects_tbl
     * const projects_tbl = await prisma.projects_tbl.upsert({
     *   create: {
     *     // ... data to create a Projects_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends projects_tblUpsertArgs>(
      args: SelectSubset<T, projects_tblUpsertArgs>
    ): CheckSelect<T, Prisma__projects_tblClient<projects_tbl>, Prisma__projects_tblClient<projects_tblGetPayload<T>>>

    /**
     * Count the number of Projects_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projects_tblCountArgs} args - Arguments to filter Projects_tbls to count.
     * @example
     * // Count the number of Projects_tbls
     * const count = await prisma.projects_tbl.count({
     *   where: {
     *     // ... the filter for the Projects_tbls we want to count
     *   }
     * })
    **/
    count<T extends projects_tblCountArgs>(
      args?: Subset<T, projects_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Projects_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Projects_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Projects_tblAggregateArgs>(args: Subset<T, Projects_tblAggregateArgs>): PrismaPromise<GetProjects_tblAggregateType<T>>

    /**
     * Group by Projects_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Projects_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Projects_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Projects_tblGroupByArgs['orderBy'] }
        : { orderBy?: Projects_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Projects_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjects_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for projects_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__projects_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    images_tbl<T extends images_tblArgs = {}>(args?: Subset<T, images_tblArgs>): CheckSelect<T, Prisma__images_tblClient<images_tbl | null >, Prisma__images_tblClient<images_tblGetPayload<T> | null >>;

    players_tbl<T extends players_tblArgs = {}>(args?: Subset<T, players_tblArgs>): CheckSelect<T, Prisma__players_tblClient<players_tbl | null >, Prisma__players_tblClient<players_tblGetPayload<T> | null >>;

    tools_tbl<T extends tools_tblFindManyArgs = {}>(args?: Subset<T, tools_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tools_tbl>>, PrismaPromise<Array<tools_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * projects_tbl findUnique
   */
  export type projects_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * Throw an Error if a projects_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which projects_tbl to fetch.
     * 
    **/
    where: projects_tblWhereUniqueInput
  }


  /**
   * projects_tbl findFirst
   */
  export type projects_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * Throw an Error if a projects_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which projects_tbl to fetch.
     * 
    **/
    where?: projects_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<projects_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects_tbls.
     * 
    **/
    cursor?: projects_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects_tbls.
     * 
    **/
    distinct?: Enumerable<Projects_tblScalarFieldEnum>
  }


  /**
   * projects_tbl findMany
   */
  export type projects_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * Filter, which projects_tbls to fetch.
     * 
    **/
    where?: projects_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<projects_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projects_tbls.
     * 
    **/
    cursor?: projects_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Projects_tblScalarFieldEnum>
  }


  /**
   * projects_tbl create
   */
  export type projects_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * The data needed to create a projects_tbl.
     * 
    **/
    data: XOR<projects_tblCreateInput, projects_tblUncheckedCreateInput>
  }


  /**
   * projects_tbl createMany
   */
  export type projects_tblCreateManyArgs = {
    /**
     * The data used to create many projects_tbls.
     * 
    **/
    data: Enumerable<projects_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * projects_tbl update
   */
  export type projects_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * The data needed to update a projects_tbl.
     * 
    **/
    data: XOR<projects_tblUpdateInput, projects_tblUncheckedUpdateInput>
    /**
     * Choose, which projects_tbl to update.
     * 
    **/
    where: projects_tblWhereUniqueInput
  }


  /**
   * projects_tbl updateMany
   */
  export type projects_tblUpdateManyArgs = {
    /**
     * The data used to update projects_tbls.
     * 
    **/
    data: XOR<projects_tblUpdateManyMutationInput, projects_tblUncheckedUpdateManyInput>
    /**
     * Filter which projects_tbls to update
     * 
    **/
    where?: projects_tblWhereInput
  }


  /**
   * projects_tbl upsert
   */
  export type projects_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * The filter to search for the projects_tbl to update in case it exists.
     * 
    **/
    where: projects_tblWhereUniqueInput
    /**
     * In case the projects_tbl found by the `where` argument doesn't exist, create a new projects_tbl with this data.
     * 
    **/
    create: XOR<projects_tblCreateInput, projects_tblUncheckedCreateInput>
    /**
     * In case the projects_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<projects_tblUpdateInput, projects_tblUncheckedUpdateInput>
  }


  /**
   * projects_tbl delete
   */
  export type projects_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
    /**
     * Filter which projects_tbl to delete.
     * 
    **/
    where: projects_tblWhereUniqueInput
  }


  /**
   * projects_tbl deleteMany
   */
  export type projects_tblDeleteManyArgs = {
    /**
     * Filter which projects_tbls to delete
     * 
    **/
    where?: projects_tblWhereInput
  }


  /**
   * projects_tbl without action
   */
  export type projects_tblArgs = {
    /**
     * Select specific fields to fetch from the projects_tbl
     * 
    **/
    select?: projects_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: projects_tblInclude | null
  }



  /**
   * Model roles_tbl
   */


  export type AggregateRoles_tbl = {
    _count: Roles_tblCountAggregateOutputType | null
    _avg: Roles_tblAvgAggregateOutputType | null
    _sum: Roles_tblSumAggregateOutputType | null
    _min: Roles_tblMinAggregateOutputType | null
    _max: Roles_tblMaxAggregateOutputType | null
  }

  export type Roles_tblAvgAggregateOutputType = {
    rle_id: number | null
    rle_description: number | null
  }

  export type Roles_tblSumAggregateOutputType = {
    rle_id: number | null
    rle_description: number | null
  }

  export type Roles_tblMinAggregateOutputType = {
    rle_id: number | null
    rle_name: string | null
    rle_description: number | null
  }

  export type Roles_tblMaxAggregateOutputType = {
    rle_id: number | null
    rle_name: string | null
    rle_description: number | null
  }

  export type Roles_tblCountAggregateOutputType = {
    rle_id: number
    rle_name: number
    rle_description: number
    _all: number
  }


  export type Roles_tblAvgAggregateInputType = {
    rle_id?: true
    rle_description?: true
  }

  export type Roles_tblSumAggregateInputType = {
    rle_id?: true
    rle_description?: true
  }

  export type Roles_tblMinAggregateInputType = {
    rle_id?: true
    rle_name?: true
    rle_description?: true
  }

  export type Roles_tblMaxAggregateInputType = {
    rle_id?: true
    rle_name?: true
    rle_description?: true
  }

  export type Roles_tblCountAggregateInputType = {
    rle_id?: true
    rle_name?: true
    rle_description?: true
    _all?: true
  }

  export type Roles_tblAggregateArgs = {
    /**
     * Filter which roles_tbl to aggregate.
     * 
    **/
    where?: roles_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<roles_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: roles_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles_tbls
    **/
    _count?: true | Roles_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Roles_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Roles_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Roles_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Roles_tblMaxAggregateInputType
  }

  export type GetRoles_tblAggregateType<T extends Roles_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles_tbl[P]>
      : GetScalarType<T[P], AggregateRoles_tbl[P]>
  }




  export type Roles_tblGroupByArgs = {
    where?: roles_tblWhereInput
    orderBy?: Enumerable<roles_tblOrderByWithAggregationInput>
    by: Array<Roles_tblScalarFieldEnum>
    having?: roles_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Roles_tblCountAggregateInputType | true
    _avg?: Roles_tblAvgAggregateInputType
    _sum?: Roles_tblSumAggregateInputType
    _min?: Roles_tblMinAggregateInputType
    _max?: Roles_tblMaxAggregateInputType
  }


  export type Roles_tblGroupByOutputType = {
    rle_id: number
    rle_name: string
    rle_description: number
    _count: Roles_tblCountAggregateOutputType | null
    _avg: Roles_tblAvgAggregateOutputType | null
    _sum: Roles_tblSumAggregateOutputType | null
    _min: Roles_tblMinAggregateOutputType | null
    _max: Roles_tblMaxAggregateOutputType | null
  }

  type GetRoles_tblGroupByPayload<T extends Roles_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Roles_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Roles_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Roles_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Roles_tblGroupByOutputType[P]>
        }
      >
    >


  export type roles_tblSelect = {
    rle_id?: boolean
    rle_name?: boolean
    rle_description?: boolean
    players_tbl?: boolean | players_tblFindManyArgs
    _count?: boolean | Roles_tblCountOutputTypeArgs
  }

  export type roles_tblInclude = {
    players_tbl?: boolean | players_tblFindManyArgs
    _count?: boolean | Roles_tblCountOutputTypeArgs
  }

  export type roles_tblGetPayload<
    S extends boolean | null | undefined | roles_tblArgs,
    U = keyof S
      > = S extends true
        ? roles_tbl
    : S extends undefined
    ? never
    : S extends roles_tblArgs | roles_tblFindManyArgs
    ?'include' extends U
    ? roles_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Roles_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'players_tbl' ? Array < players_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Roles_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof roles_tbl ? roles_tbl[P] : never
  } 
    : roles_tbl
  : roles_tbl


  type roles_tblCountArgs = Merge<
    Omit<roles_tblFindManyArgs, 'select' | 'include'> & {
      select?: Roles_tblCountAggregateInputType | true
    }
  >

  export interface roles_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Roles_tbl that matches the filter.
     * @param {roles_tblFindUniqueArgs} args - Arguments to find a Roles_tbl
     * @example
     * // Get one Roles_tbl
     * const roles_tbl = await prisma.roles_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends roles_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, roles_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'roles_tbl'> extends True ? CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>> : CheckSelect<T, Prisma__roles_tblClient<roles_tbl | null >, Prisma__roles_tblClient<roles_tblGetPayload<T> | null >>

    /**
     * Find the first Roles_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roles_tblFindFirstArgs} args - Arguments to find a Roles_tbl
     * @example
     * // Get one Roles_tbl
     * const roles_tbl = await prisma.roles_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends roles_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, roles_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'roles_tbl'> extends True ? CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>> : CheckSelect<T, Prisma__roles_tblClient<roles_tbl | null >, Prisma__roles_tblClient<roles_tblGetPayload<T> | null >>

    /**
     * Find zero or more Roles_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roles_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles_tbls
     * const roles_tbls = await prisma.roles_tbl.findMany()
     * 
     * // Get first 10 Roles_tbls
     * const roles_tbls = await prisma.roles_tbl.findMany({ take: 10 })
     * 
     * // Only select the `rle_id`
     * const roles_tblWithRle_idOnly = await prisma.roles_tbl.findMany({ select: { rle_id: true } })
     * 
    **/
    findMany<T extends roles_tblFindManyArgs>(
      args?: SelectSubset<T, roles_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<roles_tbl>>, PrismaPromise<Array<roles_tblGetPayload<T>>>>

    /**
     * Create a Roles_tbl.
     * @param {roles_tblCreateArgs} args - Arguments to create a Roles_tbl.
     * @example
     * // Create one Roles_tbl
     * const Roles_tbl = await prisma.roles_tbl.create({
     *   data: {
     *     // ... data to create a Roles_tbl
     *   }
     * })
     * 
    **/
    create<T extends roles_tblCreateArgs>(
      args: SelectSubset<T, roles_tblCreateArgs>
    ): CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>>

    /**
     * Create many Roles_tbls.
     *     @param {roles_tblCreateManyArgs} args - Arguments to create many Roles_tbls.
     *     @example
     *     // Create many Roles_tbls
     *     const roles_tbl = await prisma.roles_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends roles_tblCreateManyArgs>(
      args?: SelectSubset<T, roles_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Roles_tbl.
     * @param {roles_tblDeleteArgs} args - Arguments to delete one Roles_tbl.
     * @example
     * // Delete one Roles_tbl
     * const Roles_tbl = await prisma.roles_tbl.delete({
     *   where: {
     *     // ... filter to delete one Roles_tbl
     *   }
     * })
     * 
    **/
    delete<T extends roles_tblDeleteArgs>(
      args: SelectSubset<T, roles_tblDeleteArgs>
    ): CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>>

    /**
     * Update one Roles_tbl.
     * @param {roles_tblUpdateArgs} args - Arguments to update one Roles_tbl.
     * @example
     * // Update one Roles_tbl
     * const roles_tbl = await prisma.roles_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends roles_tblUpdateArgs>(
      args: SelectSubset<T, roles_tblUpdateArgs>
    ): CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>>

    /**
     * Delete zero or more Roles_tbls.
     * @param {roles_tblDeleteManyArgs} args - Arguments to filter Roles_tbls to delete.
     * @example
     * // Delete a few Roles_tbls
     * const { count } = await prisma.roles_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends roles_tblDeleteManyArgs>(
      args?: SelectSubset<T, roles_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roles_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles_tbls
     * const roles_tbl = await prisma.roles_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends roles_tblUpdateManyArgs>(
      args: SelectSubset<T, roles_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles_tbl.
     * @param {roles_tblUpsertArgs} args - Arguments to update or create a Roles_tbl.
     * @example
     * // Update or create a Roles_tbl
     * const roles_tbl = await prisma.roles_tbl.upsert({
     *   create: {
     *     // ... data to create a Roles_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends roles_tblUpsertArgs>(
      args: SelectSubset<T, roles_tblUpsertArgs>
    ): CheckSelect<T, Prisma__roles_tblClient<roles_tbl>, Prisma__roles_tblClient<roles_tblGetPayload<T>>>

    /**
     * Count the number of Roles_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roles_tblCountArgs} args - Arguments to filter Roles_tbls to count.
     * @example
     * // Count the number of Roles_tbls
     * const count = await prisma.roles_tbl.count({
     *   where: {
     *     // ... the filter for the Roles_tbls we want to count
     *   }
     * })
    **/
    count<T extends roles_tblCountArgs>(
      args?: Subset<T, roles_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Roles_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Roles_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Roles_tblAggregateArgs>(args: Subset<T, Roles_tblAggregateArgs>): PrismaPromise<GetRoles_tblAggregateType<T>>

    /**
     * Group by Roles_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Roles_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Roles_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Roles_tblGroupByArgs['orderBy'] }
        : { orderBy?: Roles_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Roles_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoles_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__roles_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    players_tbl<T extends players_tblFindManyArgs = {}>(args?: Subset<T, players_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<players_tbl>>, PrismaPromise<Array<players_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * roles_tbl findUnique
   */
  export type roles_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * Throw an Error if a roles_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles_tbl to fetch.
     * 
    **/
    where: roles_tblWhereUniqueInput
  }


  /**
   * roles_tbl findFirst
   */
  export type roles_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * Throw an Error if a roles_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles_tbl to fetch.
     * 
    **/
    where?: roles_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<roles_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles_tbls.
     * 
    **/
    cursor?: roles_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles_tbls.
     * 
    **/
    distinct?: Enumerable<Roles_tblScalarFieldEnum>
  }


  /**
   * roles_tbl findMany
   */
  export type roles_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * Filter, which roles_tbls to fetch.
     * 
    **/
    where?: roles_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<roles_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles_tbls.
     * 
    **/
    cursor?: roles_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Roles_tblScalarFieldEnum>
  }


  /**
   * roles_tbl create
   */
  export type roles_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * The data needed to create a roles_tbl.
     * 
    **/
    data: XOR<roles_tblCreateInput, roles_tblUncheckedCreateInput>
  }


  /**
   * roles_tbl createMany
   */
  export type roles_tblCreateManyArgs = {
    /**
     * The data used to create many roles_tbls.
     * 
    **/
    data: Enumerable<roles_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * roles_tbl update
   */
  export type roles_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * The data needed to update a roles_tbl.
     * 
    **/
    data: XOR<roles_tblUpdateInput, roles_tblUncheckedUpdateInput>
    /**
     * Choose, which roles_tbl to update.
     * 
    **/
    where: roles_tblWhereUniqueInput
  }


  /**
   * roles_tbl updateMany
   */
  export type roles_tblUpdateManyArgs = {
    /**
     * The data used to update roles_tbls.
     * 
    **/
    data: XOR<roles_tblUpdateManyMutationInput, roles_tblUncheckedUpdateManyInput>
    /**
     * Filter which roles_tbls to update
     * 
    **/
    where?: roles_tblWhereInput
  }


  /**
   * roles_tbl upsert
   */
  export type roles_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * The filter to search for the roles_tbl to update in case it exists.
     * 
    **/
    where: roles_tblWhereUniqueInput
    /**
     * In case the roles_tbl found by the `where` argument doesn't exist, create a new roles_tbl with this data.
     * 
    **/
    create: XOR<roles_tblCreateInput, roles_tblUncheckedCreateInput>
    /**
     * In case the roles_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<roles_tblUpdateInput, roles_tblUncheckedUpdateInput>
  }


  /**
   * roles_tbl delete
   */
  export type roles_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
    /**
     * Filter which roles_tbl to delete.
     * 
    **/
    where: roles_tblWhereUniqueInput
  }


  /**
   * roles_tbl deleteMany
   */
  export type roles_tblDeleteManyArgs = {
    /**
     * Filter which roles_tbls to delete
     * 
    **/
    where?: roles_tblWhereInput
  }


  /**
   * roles_tbl without action
   */
  export type roles_tblArgs = {
    /**
     * Select specific fields to fetch from the roles_tbl
     * 
    **/
    select?: roles_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: roles_tblInclude | null
  }



  /**
   * Model tools_tbl
   */


  export type AggregateTools_tbl = {
    _count: Tools_tblCountAggregateOutputType | null
    _avg: Tools_tblAvgAggregateOutputType | null
    _sum: Tools_tblSumAggregateOutputType | null
    _min: Tools_tblMinAggregateOutputType | null
    _max: Tools_tblMaxAggregateOutputType | null
  }

  export type Tools_tblAvgAggregateOutputType = {
    too_id: number | null
    too_category: number | null
    too_project: number | null
  }

  export type Tools_tblSumAggregateOutputType = {
    too_id: number | null
    too_category: number | null
    too_project: number | null
  }

  export type Tools_tblMinAggregateOutputType = {
    too_id: number | null
    too_name: string | null
    too_description: string | null
    too_category: number | null
    too_path: string | null
    too_project: number | null
  }

  export type Tools_tblMaxAggregateOutputType = {
    too_id: number | null
    too_name: string | null
    too_description: string | null
    too_category: number | null
    too_path: string | null
    too_project: number | null
  }

  export type Tools_tblCountAggregateOutputType = {
    too_id: number
    too_name: number
    too_description: number
    too_category: number
    too_path: number
    too_project: number
    _all: number
  }


  export type Tools_tblAvgAggregateInputType = {
    too_id?: true
    too_category?: true
    too_project?: true
  }

  export type Tools_tblSumAggregateInputType = {
    too_id?: true
    too_category?: true
    too_project?: true
  }

  export type Tools_tblMinAggregateInputType = {
    too_id?: true
    too_name?: true
    too_description?: true
    too_category?: true
    too_path?: true
    too_project?: true
  }

  export type Tools_tblMaxAggregateInputType = {
    too_id?: true
    too_name?: true
    too_description?: true
    too_category?: true
    too_path?: true
    too_project?: true
  }

  export type Tools_tblCountAggregateInputType = {
    too_id?: true
    too_name?: true
    too_description?: true
    too_category?: true
    too_path?: true
    too_project?: true
    _all?: true
  }

  export type Tools_tblAggregateArgs = {
    /**
     * Filter which tools_tbl to aggregate.
     * 
    **/
    where?: tools_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tools_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<tools_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tools_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tools_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tools_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tools_tbls
    **/
    _count?: true | Tools_tblCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tools_tblAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tools_tblSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tools_tblMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tools_tblMaxAggregateInputType
  }

  export type GetTools_tblAggregateType<T extends Tools_tblAggregateArgs> = {
        [P in keyof T & keyof AggregateTools_tbl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTools_tbl[P]>
      : GetScalarType<T[P], AggregateTools_tbl[P]>
  }




  export type Tools_tblGroupByArgs = {
    where?: tools_tblWhereInput
    orderBy?: Enumerable<tools_tblOrderByWithAggregationInput>
    by: Array<Tools_tblScalarFieldEnum>
    having?: tools_tblScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tools_tblCountAggregateInputType | true
    _avg?: Tools_tblAvgAggregateInputType
    _sum?: Tools_tblSumAggregateInputType
    _min?: Tools_tblMinAggregateInputType
    _max?: Tools_tblMaxAggregateInputType
  }


  export type Tools_tblGroupByOutputType = {
    too_id: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    too_project: number
    _count: Tools_tblCountAggregateOutputType | null
    _avg: Tools_tblAvgAggregateOutputType | null
    _sum: Tools_tblSumAggregateOutputType | null
    _min: Tools_tblMinAggregateOutputType | null
    _max: Tools_tblMaxAggregateOutputType | null
  }

  type GetTools_tblGroupByPayload<T extends Tools_tblGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tools_tblGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tools_tblGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tools_tblGroupByOutputType[P]>
            : GetScalarType<T[P], Tools_tblGroupByOutputType[P]>
        }
      >
    >


  export type tools_tblSelect = {
    too_id?: boolean
    too_name?: boolean
    too_description?: boolean
    too_category?: boolean
    too_path?: boolean
    too_project?: boolean
    projects_tbl?: boolean | projects_tblArgs
    data_tbl?: boolean | data_tblFindManyArgs
    plugins_tbl?: boolean | plugins_tblFindManyArgs
    _count?: boolean | Tools_tblCountOutputTypeArgs
  }

  export type tools_tblInclude = {
    projects_tbl?: boolean | projects_tblArgs
    data_tbl?: boolean | data_tblFindManyArgs
    plugins_tbl?: boolean | plugins_tblFindManyArgs
    _count?: boolean | Tools_tblCountOutputTypeArgs
  }

  export type tools_tblGetPayload<
    S extends boolean | null | undefined | tools_tblArgs,
    U = keyof S
      > = S extends true
        ? tools_tbl
    : S extends undefined
    ? never
    : S extends tools_tblArgs | tools_tblFindManyArgs
    ?'include' extends U
    ? tools_tbl  & {
    [P in TrueKeys<S['include']>]:
        P extends 'projects_tbl' ? projects_tblGetPayload<S['include'][P]> :
        P extends 'data_tbl' ? Array < data_tblGetPayload<S['include'][P]>>  :
        P extends 'plugins_tbl' ? Array < plugins_tblGetPayload<S['include'][P]>>  :
        P extends '_count' ? Tools_tblCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'projects_tbl' ? projects_tblGetPayload<S['select'][P]> :
        P extends 'data_tbl' ? Array < data_tblGetPayload<S['select'][P]>>  :
        P extends 'plugins_tbl' ? Array < plugins_tblGetPayload<S['select'][P]>>  :
        P extends '_count' ? Tools_tblCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tools_tbl ? tools_tbl[P] : never
  } 
    : tools_tbl
  : tools_tbl


  type tools_tblCountArgs = Merge<
    Omit<tools_tblFindManyArgs, 'select' | 'include'> & {
      select?: Tools_tblCountAggregateInputType | true
    }
  >

  export interface tools_tblDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tools_tbl that matches the filter.
     * @param {tools_tblFindUniqueArgs} args - Arguments to find a Tools_tbl
     * @example
     * // Get one Tools_tbl
     * const tools_tbl = await prisma.tools_tbl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tools_tblFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tools_tblFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tools_tbl'> extends True ? CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>> : CheckSelect<T, Prisma__tools_tblClient<tools_tbl | null >, Prisma__tools_tblClient<tools_tblGetPayload<T> | null >>

    /**
     * Find the first Tools_tbl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tools_tblFindFirstArgs} args - Arguments to find a Tools_tbl
     * @example
     * // Get one Tools_tbl
     * const tools_tbl = await prisma.tools_tbl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tools_tblFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tools_tblFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tools_tbl'> extends True ? CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>> : CheckSelect<T, Prisma__tools_tblClient<tools_tbl | null >, Prisma__tools_tblClient<tools_tblGetPayload<T> | null >>

    /**
     * Find zero or more Tools_tbls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tools_tblFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tools_tbls
     * const tools_tbls = await prisma.tools_tbl.findMany()
     * 
     * // Get first 10 Tools_tbls
     * const tools_tbls = await prisma.tools_tbl.findMany({ take: 10 })
     * 
     * // Only select the `too_id`
     * const tools_tblWithToo_idOnly = await prisma.tools_tbl.findMany({ select: { too_id: true } })
     * 
    **/
    findMany<T extends tools_tblFindManyArgs>(
      args?: SelectSubset<T, tools_tblFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tools_tbl>>, PrismaPromise<Array<tools_tblGetPayload<T>>>>

    /**
     * Create a Tools_tbl.
     * @param {tools_tblCreateArgs} args - Arguments to create a Tools_tbl.
     * @example
     * // Create one Tools_tbl
     * const Tools_tbl = await prisma.tools_tbl.create({
     *   data: {
     *     // ... data to create a Tools_tbl
     *   }
     * })
     * 
    **/
    create<T extends tools_tblCreateArgs>(
      args: SelectSubset<T, tools_tblCreateArgs>
    ): CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>>

    /**
     * Create many Tools_tbls.
     *     @param {tools_tblCreateManyArgs} args - Arguments to create many Tools_tbls.
     *     @example
     *     // Create many Tools_tbls
     *     const tools_tbl = await prisma.tools_tbl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tools_tblCreateManyArgs>(
      args?: SelectSubset<T, tools_tblCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tools_tbl.
     * @param {tools_tblDeleteArgs} args - Arguments to delete one Tools_tbl.
     * @example
     * // Delete one Tools_tbl
     * const Tools_tbl = await prisma.tools_tbl.delete({
     *   where: {
     *     // ... filter to delete one Tools_tbl
     *   }
     * })
     * 
    **/
    delete<T extends tools_tblDeleteArgs>(
      args: SelectSubset<T, tools_tblDeleteArgs>
    ): CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>>

    /**
     * Update one Tools_tbl.
     * @param {tools_tblUpdateArgs} args - Arguments to update one Tools_tbl.
     * @example
     * // Update one Tools_tbl
     * const tools_tbl = await prisma.tools_tbl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tools_tblUpdateArgs>(
      args: SelectSubset<T, tools_tblUpdateArgs>
    ): CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>>

    /**
     * Delete zero or more Tools_tbls.
     * @param {tools_tblDeleteManyArgs} args - Arguments to filter Tools_tbls to delete.
     * @example
     * // Delete a few Tools_tbls
     * const { count } = await prisma.tools_tbl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tools_tblDeleteManyArgs>(
      args?: SelectSubset<T, tools_tblDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tools_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tools_tblUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tools_tbls
     * const tools_tbl = await prisma.tools_tbl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tools_tblUpdateManyArgs>(
      args: SelectSubset<T, tools_tblUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tools_tbl.
     * @param {tools_tblUpsertArgs} args - Arguments to update or create a Tools_tbl.
     * @example
     * // Update or create a Tools_tbl
     * const tools_tbl = await prisma.tools_tbl.upsert({
     *   create: {
     *     // ... data to create a Tools_tbl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tools_tbl we want to update
     *   }
     * })
    **/
    upsert<T extends tools_tblUpsertArgs>(
      args: SelectSubset<T, tools_tblUpsertArgs>
    ): CheckSelect<T, Prisma__tools_tblClient<tools_tbl>, Prisma__tools_tblClient<tools_tblGetPayload<T>>>

    /**
     * Count the number of Tools_tbls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tools_tblCountArgs} args - Arguments to filter Tools_tbls to count.
     * @example
     * // Count the number of Tools_tbls
     * const count = await prisma.tools_tbl.count({
     *   where: {
     *     // ... the filter for the Tools_tbls we want to count
     *   }
     * })
    **/
    count<T extends tools_tblCountArgs>(
      args?: Subset<T, tools_tblCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tools_tblCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tools_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tools_tblAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tools_tblAggregateArgs>(args: Subset<T, Tools_tblAggregateArgs>): PrismaPromise<GetTools_tblAggregateType<T>>

    /**
     * Group by Tools_tbl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tools_tblGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tools_tblGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tools_tblGroupByArgs['orderBy'] }
        : { orderBy?: Tools_tblGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tools_tblGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTools_tblGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tools_tbl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tools_tblClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    projects_tbl<T extends projects_tblArgs = {}>(args?: Subset<T, projects_tblArgs>): CheckSelect<T, Prisma__projects_tblClient<projects_tbl | null >, Prisma__projects_tblClient<projects_tblGetPayload<T> | null >>;

    data_tbl<T extends data_tblFindManyArgs = {}>(args?: Subset<T, data_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<data_tbl>>, PrismaPromise<Array<data_tblGetPayload<T>>>>;

    plugins_tbl<T extends plugins_tblFindManyArgs = {}>(args?: Subset<T, plugins_tblFindManyArgs>): CheckSelect<T, PrismaPromise<Array<plugins_tbl>>, PrismaPromise<Array<plugins_tblGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tools_tbl findUnique
   */
  export type tools_tblFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * Throw an Error if a tools_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tools_tbl to fetch.
     * 
    **/
    where: tools_tblWhereUniqueInput
  }


  /**
   * tools_tbl findFirst
   */
  export type tools_tblFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * Throw an Error if a tools_tbl can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tools_tbl to fetch.
     * 
    **/
    where?: tools_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tools_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<tools_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tools_tbls.
     * 
    **/
    cursor?: tools_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tools_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tools_tbls.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tools_tbls.
     * 
    **/
    distinct?: Enumerable<Tools_tblScalarFieldEnum>
  }


  /**
   * tools_tbl findMany
   */
  export type tools_tblFindManyArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * Filter, which tools_tbls to fetch.
     * 
    **/
    where?: tools_tblWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tools_tbls to fetch.
     * 
    **/
    orderBy?: Enumerable<tools_tblOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tools_tbls.
     * 
    **/
    cursor?: tools_tblWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tools_tbls from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tools_tbls.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tools_tblScalarFieldEnum>
  }


  /**
   * tools_tbl create
   */
  export type tools_tblCreateArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * The data needed to create a tools_tbl.
     * 
    **/
    data: XOR<tools_tblCreateInput, tools_tblUncheckedCreateInput>
  }


  /**
   * tools_tbl createMany
   */
  export type tools_tblCreateManyArgs = {
    /**
     * The data used to create many tools_tbls.
     * 
    **/
    data: Enumerable<tools_tblCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tools_tbl update
   */
  export type tools_tblUpdateArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * The data needed to update a tools_tbl.
     * 
    **/
    data: XOR<tools_tblUpdateInput, tools_tblUncheckedUpdateInput>
    /**
     * Choose, which tools_tbl to update.
     * 
    **/
    where: tools_tblWhereUniqueInput
  }


  /**
   * tools_tbl updateMany
   */
  export type tools_tblUpdateManyArgs = {
    /**
     * The data used to update tools_tbls.
     * 
    **/
    data: XOR<tools_tblUpdateManyMutationInput, tools_tblUncheckedUpdateManyInput>
    /**
     * Filter which tools_tbls to update
     * 
    **/
    where?: tools_tblWhereInput
  }


  /**
   * tools_tbl upsert
   */
  export type tools_tblUpsertArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * The filter to search for the tools_tbl to update in case it exists.
     * 
    **/
    where: tools_tblWhereUniqueInput
    /**
     * In case the tools_tbl found by the `where` argument doesn't exist, create a new tools_tbl with this data.
     * 
    **/
    create: XOR<tools_tblCreateInput, tools_tblUncheckedCreateInput>
    /**
     * In case the tools_tbl was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tools_tblUpdateInput, tools_tblUncheckedUpdateInput>
  }


  /**
   * tools_tbl delete
   */
  export type tools_tblDeleteArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
    /**
     * Filter which tools_tbl to delete.
     * 
    **/
    where: tools_tblWhereUniqueInput
  }


  /**
   * tools_tbl deleteMany
   */
  export type tools_tblDeleteManyArgs = {
    /**
     * Filter which tools_tbls to delete
     * 
    **/
    where?: tools_tblWhereInput
  }


  /**
   * tools_tbl without action
   */
  export type tools_tblArgs = {
    /**
     * Select specific fields to fetch from the tools_tbl
     * 
    **/
    select?: tools_tblSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tools_tblInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Users_tblScalarFieldEnum: {
    usr_id: 'usr_id',
    usr_username: 'usr_username',
    usr_mail: 'usr_mail',
    usr_password: 'usr_password',
    usr_permissions: 'usr_permissions',
    usr_token_iat: 'usr_token_iat',
    usr_token_exp: 'usr_token_exp'
  };

  export type Users_tblScalarFieldEnum = (typeof Users_tblScalarFieldEnum)[keyof typeof Users_tblScalarFieldEnum]


  export const Data_tblScalarFieldEnum: {
    dta_id: 'dta_id',
    dta_date: 'dta_date',
    dta_content: 'dta_content',
    dta_tool: 'dta_tool',
    dta_user: 'dta_user'
  };

  export type Data_tblScalarFieldEnum = (typeof Data_tblScalarFieldEnum)[keyof typeof Data_tblScalarFieldEnum]


  export const Images_tblScalarFieldEnum: {
    img_id: 'img_id',
    img_name: 'img_name',
    img_path: 'img_path'
  };

  export type Images_tblScalarFieldEnum = (typeof Images_tblScalarFieldEnum)[keyof typeof Images_tblScalarFieldEnum]


  export const Players_tblScalarFieldEnum: {
    ply_id: 'ply_id',
    ply_role: 'ply_role',
    ply_avatar: 'ply_avatar',
    ply_user: 'ply_user'
  };

  export type Players_tblScalarFieldEnum = (typeof Players_tblScalarFieldEnum)[keyof typeof Players_tblScalarFieldEnum]


  export const Plugins_tblScalarFieldEnum: {
    plg_id: 'plg_id',
    plg_name: 'plg_name',
    plg_description: 'plg_description',
    plg_path: 'plg_path',
    plg_tool: 'plg_tool'
  };

  export type Plugins_tblScalarFieldEnum = (typeof Plugins_tblScalarFieldEnum)[keyof typeof Plugins_tblScalarFieldEnum]


  export const Projects_tblScalarFieldEnum: {
    prj_id: 'prj_id',
    proj_name: 'proj_name',
    prj_description: 'prj_description',
    prj_config: 'prj_config',
    prj_owner: 'prj_owner',
    prj_avatar: 'prj_avatar'
  };

  export type Projects_tblScalarFieldEnum = (typeof Projects_tblScalarFieldEnum)[keyof typeof Projects_tblScalarFieldEnum]


  export const Roles_tblScalarFieldEnum: {
    rle_id: 'rle_id',
    rle_name: 'rle_name',
    rle_description: 'rle_description'
  };

  export type Roles_tblScalarFieldEnum = (typeof Roles_tblScalarFieldEnum)[keyof typeof Roles_tblScalarFieldEnum]


  export const Tools_tblScalarFieldEnum: {
    too_id: 'too_id',
    too_name: 'too_name',
    too_description: 'too_description',
    too_category: 'too_category',
    too_path: 'too_path',
    too_project: 'too_project'
  };

  export type Tools_tblScalarFieldEnum = (typeof Tools_tblScalarFieldEnum)[keyof typeof Tools_tblScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type users_tblWhereInput = {
    AND?: Enumerable<users_tblWhereInput>
    OR?: Enumerable<users_tblWhereInput>
    NOT?: Enumerable<users_tblWhereInput>
    usr_id?: IntFilter | number
    usr_username?: StringFilter | string
    usr_mail?: StringFilter | string
    usr_password?: StringFilter | string
    usr_permissions?: BoolFilter | boolean
    usr_token_iat?: IntNullableFilter | number | null
    usr_token_exp?: IntNullableFilter | number | null
    players_tbl?: Players_tblListRelationFilter
  }

  export type users_tblOrderByWithRelationInput = {
    usr_id?: SortOrder
    usr_username?: SortOrder
    usr_mail?: SortOrder
    usr_password?: SortOrder
    usr_permissions?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
    players_tbl?: players_tblOrderByRelationAggregateInput
  }

  export type users_tblWhereUniqueInput = {
    usr_id?: number
  }

  export type users_tblOrderByWithAggregationInput = {
    usr_id?: SortOrder
    usr_username?: SortOrder
    usr_mail?: SortOrder
    usr_password?: SortOrder
    usr_permissions?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
    _count?: users_tblCountOrderByAggregateInput
    _avg?: users_tblAvgOrderByAggregateInput
    _max?: users_tblMaxOrderByAggregateInput
    _min?: users_tblMinOrderByAggregateInput
    _sum?: users_tblSumOrderByAggregateInput
  }

  export type users_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<users_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<users_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<users_tblScalarWhereWithAggregatesInput>
    usr_id?: IntWithAggregatesFilter | number
    usr_username?: StringWithAggregatesFilter | string
    usr_mail?: StringWithAggregatesFilter | string
    usr_password?: StringWithAggregatesFilter | string
    usr_permissions?: BoolWithAggregatesFilter | boolean
    usr_token_iat?: IntNullableWithAggregatesFilter | number | null
    usr_token_exp?: IntNullableWithAggregatesFilter | number | null
  }

  export type data_tblWhereInput = {
    AND?: Enumerable<data_tblWhereInput>
    OR?: Enumerable<data_tblWhereInput>
    NOT?: Enumerable<data_tblWhereInput>
    dta_id?: IntFilter | number
    dta_date?: DateTimeFilter | Date | string
    dta_content?: JsonFilter
    dta_tool?: IntFilter | number
    dta_user?: IntFilter | number
    tools_tbl?: XOR<Tools_tblRelationFilter, tools_tblWhereInput>
    players_tbl?: XOR<Players_tblRelationFilter, players_tblWhereInput>
  }

  export type data_tblOrderByWithRelationInput = {
    dta_id?: SortOrder
    dta_date?: SortOrder
    dta_content?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
    tools_tbl?: tools_tblOrderByWithRelationInput
    players_tbl?: players_tblOrderByWithRelationInput
  }

  export type data_tblWhereUniqueInput = {
    dta_id?: number
  }

  export type data_tblOrderByWithAggregationInput = {
    dta_id?: SortOrder
    dta_date?: SortOrder
    dta_content?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
    _count?: data_tblCountOrderByAggregateInput
    _avg?: data_tblAvgOrderByAggregateInput
    _max?: data_tblMaxOrderByAggregateInput
    _min?: data_tblMinOrderByAggregateInput
    _sum?: data_tblSumOrderByAggregateInput
  }

  export type data_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<data_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<data_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<data_tblScalarWhereWithAggregatesInput>
    dta_id?: IntWithAggregatesFilter | number
    dta_date?: DateTimeWithAggregatesFilter | Date | string
    dta_content?: JsonWithAggregatesFilter
    dta_tool?: IntWithAggregatesFilter | number
    dta_user?: IntWithAggregatesFilter | number
  }

  export type images_tblWhereInput = {
    AND?: Enumerable<images_tblWhereInput>
    OR?: Enumerable<images_tblWhereInput>
    NOT?: Enumerable<images_tblWhereInput>
    img_id?: IntFilter | number
    img_name?: StringFilter | string
    img_path?: StringFilter | string
    players_tbl?: Players_tblListRelationFilter
    projects_tbl?: Projects_tblListRelationFilter
  }

  export type images_tblOrderByWithRelationInput = {
    img_id?: SortOrder
    img_name?: SortOrder
    img_path?: SortOrder
    players_tbl?: players_tblOrderByRelationAggregateInput
    projects_tbl?: projects_tblOrderByRelationAggregateInput
  }

  export type images_tblWhereUniqueInput = {
    img_id?: number
  }

  export type images_tblOrderByWithAggregationInput = {
    img_id?: SortOrder
    img_name?: SortOrder
    img_path?: SortOrder
    _count?: images_tblCountOrderByAggregateInput
    _avg?: images_tblAvgOrderByAggregateInput
    _max?: images_tblMaxOrderByAggregateInput
    _min?: images_tblMinOrderByAggregateInput
    _sum?: images_tblSumOrderByAggregateInput
  }

  export type images_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<images_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<images_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<images_tblScalarWhereWithAggregatesInput>
    img_id?: IntWithAggregatesFilter | number
    img_name?: StringWithAggregatesFilter | string
    img_path?: StringWithAggregatesFilter | string
  }

  export type players_tblWhereInput = {
    AND?: Enumerable<players_tblWhereInput>
    OR?: Enumerable<players_tblWhereInput>
    NOT?: Enumerable<players_tblWhereInput>
    ply_id?: IntFilter | number
    ply_role?: IntFilter | number
    ply_avatar?: IntFilter | number
    ply_user?: IntFilter | number
    images_tbl?: XOR<Images_tblRelationFilter, images_tblWhereInput>
    roles_tbl?: XOR<Roles_tblRelationFilter, roles_tblWhereInput>
    users_tbl?: XOR<Users_tblRelationFilter, users_tblWhereInput>
    data_tbl?: Data_tblListRelationFilter
    projects_tbl?: Projects_tblListRelationFilter
  }

  export type players_tblOrderByWithRelationInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
    images_tbl?: images_tblOrderByWithRelationInput
    roles_tbl?: roles_tblOrderByWithRelationInput
    users_tbl?: users_tblOrderByWithRelationInput
    data_tbl?: data_tblOrderByRelationAggregateInput
    projects_tbl?: projects_tblOrderByRelationAggregateInput
  }

  export type players_tblWhereUniqueInput = {
    ply_id?: number
  }

  export type players_tblOrderByWithAggregationInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
    _count?: players_tblCountOrderByAggregateInput
    _avg?: players_tblAvgOrderByAggregateInput
    _max?: players_tblMaxOrderByAggregateInput
    _min?: players_tblMinOrderByAggregateInput
    _sum?: players_tblSumOrderByAggregateInput
  }

  export type players_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<players_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<players_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<players_tblScalarWhereWithAggregatesInput>
    ply_id?: IntWithAggregatesFilter | number
    ply_role?: IntWithAggregatesFilter | number
    ply_avatar?: IntWithAggregatesFilter | number
    ply_user?: IntWithAggregatesFilter | number
  }

  export type plugins_tblWhereInput = {
    AND?: Enumerable<plugins_tblWhereInput>
    OR?: Enumerable<plugins_tblWhereInput>
    NOT?: Enumerable<plugins_tblWhereInput>
    plg_id?: IntFilter | number
    plg_name?: StringFilter | string
    plg_description?: StringFilter | string
    plg_path?: StringFilter | string
    plg_tool?: IntFilter | number
    tools_tbl?: XOR<Tools_tblRelationFilter, tools_tblWhereInput>
  }

  export type plugins_tblOrderByWithRelationInput = {
    plg_id?: SortOrder
    plg_name?: SortOrder
    plg_description?: SortOrder
    plg_path?: SortOrder
    plg_tool?: SortOrder
    tools_tbl?: tools_tblOrderByWithRelationInput
  }

  export type plugins_tblWhereUniqueInput = {
    plg_id?: number
  }

  export type plugins_tblOrderByWithAggregationInput = {
    plg_id?: SortOrder
    plg_name?: SortOrder
    plg_description?: SortOrder
    plg_path?: SortOrder
    plg_tool?: SortOrder
    _count?: plugins_tblCountOrderByAggregateInput
    _avg?: plugins_tblAvgOrderByAggregateInput
    _max?: plugins_tblMaxOrderByAggregateInput
    _min?: plugins_tblMinOrderByAggregateInput
    _sum?: plugins_tblSumOrderByAggregateInput
  }

  export type plugins_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<plugins_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<plugins_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<plugins_tblScalarWhereWithAggregatesInput>
    plg_id?: IntWithAggregatesFilter | number
    plg_name?: StringWithAggregatesFilter | string
    plg_description?: StringWithAggregatesFilter | string
    plg_path?: StringWithAggregatesFilter | string
    plg_tool?: IntWithAggregatesFilter | number
  }

  export type projects_tblWhereInput = {
    AND?: Enumerable<projects_tblWhereInput>
    OR?: Enumerable<projects_tblWhereInput>
    NOT?: Enumerable<projects_tblWhereInput>
    prj_id?: IntFilter | number
    proj_name?: StringFilter | string
    prj_description?: IntFilter | number
    prj_config?: JsonFilter
    prj_owner?: IntFilter | number
    prj_avatar?: IntFilter | number
    images_tbl?: XOR<Images_tblRelationFilter, images_tblWhereInput>
    players_tbl?: XOR<Players_tblRelationFilter, players_tblWhereInput>
    tools_tbl?: Tools_tblListRelationFilter
  }

  export type projects_tblOrderByWithRelationInput = {
    prj_id?: SortOrder
    proj_name?: SortOrder
    prj_description?: SortOrder
    prj_config?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
    images_tbl?: images_tblOrderByWithRelationInput
    players_tbl?: players_tblOrderByWithRelationInput
    tools_tbl?: tools_tblOrderByRelationAggregateInput
  }

  export type projects_tblWhereUniqueInput = {
    prj_id?: number
  }

  export type projects_tblOrderByWithAggregationInput = {
    prj_id?: SortOrder
    proj_name?: SortOrder
    prj_description?: SortOrder
    prj_config?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
    _count?: projects_tblCountOrderByAggregateInput
    _avg?: projects_tblAvgOrderByAggregateInput
    _max?: projects_tblMaxOrderByAggregateInput
    _min?: projects_tblMinOrderByAggregateInput
    _sum?: projects_tblSumOrderByAggregateInput
  }

  export type projects_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<projects_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<projects_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<projects_tblScalarWhereWithAggregatesInput>
    prj_id?: IntWithAggregatesFilter | number
    proj_name?: StringWithAggregatesFilter | string
    prj_description?: IntWithAggregatesFilter | number
    prj_config?: JsonWithAggregatesFilter
    prj_owner?: IntWithAggregatesFilter | number
    prj_avatar?: IntWithAggregatesFilter | number
  }

  export type roles_tblWhereInput = {
    AND?: Enumerable<roles_tblWhereInput>
    OR?: Enumerable<roles_tblWhereInput>
    NOT?: Enumerable<roles_tblWhereInput>
    rle_id?: IntFilter | number
    rle_name?: StringFilter | string
    rle_description?: IntFilter | number
    players_tbl?: Players_tblListRelationFilter
  }

  export type roles_tblOrderByWithRelationInput = {
    rle_id?: SortOrder
    rle_name?: SortOrder
    rle_description?: SortOrder
    players_tbl?: players_tblOrderByRelationAggregateInput
  }

  export type roles_tblWhereUniqueInput = {
    rle_id?: number
  }

  export type roles_tblOrderByWithAggregationInput = {
    rle_id?: SortOrder
    rle_name?: SortOrder
    rle_description?: SortOrder
    _count?: roles_tblCountOrderByAggregateInput
    _avg?: roles_tblAvgOrderByAggregateInput
    _max?: roles_tblMaxOrderByAggregateInput
    _min?: roles_tblMinOrderByAggregateInput
    _sum?: roles_tblSumOrderByAggregateInput
  }

  export type roles_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<roles_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<roles_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<roles_tblScalarWhereWithAggregatesInput>
    rle_id?: IntWithAggregatesFilter | number
    rle_name?: StringWithAggregatesFilter | string
    rle_description?: IntWithAggregatesFilter | number
  }

  export type tools_tblWhereInput = {
    AND?: Enumerable<tools_tblWhereInput>
    OR?: Enumerable<tools_tblWhereInput>
    NOT?: Enumerable<tools_tblWhereInput>
    too_id?: IntFilter | number
    too_name?: StringFilter | string
    too_description?: StringFilter | string
    too_category?: IntFilter | number
    too_path?: StringFilter | string
    too_project?: IntFilter | number
    projects_tbl?: XOR<Projects_tblRelationFilter, projects_tblWhereInput>
    data_tbl?: Data_tblListRelationFilter
    plugins_tbl?: Plugins_tblListRelationFilter
  }

  export type tools_tblOrderByWithRelationInput = {
    too_id?: SortOrder
    too_name?: SortOrder
    too_description?: SortOrder
    too_category?: SortOrder
    too_path?: SortOrder
    too_project?: SortOrder
    projects_tbl?: projects_tblOrderByWithRelationInput
    data_tbl?: data_tblOrderByRelationAggregateInput
    plugins_tbl?: plugins_tblOrderByRelationAggregateInput
  }

  export type tools_tblWhereUniqueInput = {
    too_id?: number
  }

  export type tools_tblOrderByWithAggregationInput = {
    too_id?: SortOrder
    too_name?: SortOrder
    too_description?: SortOrder
    too_category?: SortOrder
    too_path?: SortOrder
    too_project?: SortOrder
    _count?: tools_tblCountOrderByAggregateInput
    _avg?: tools_tblAvgOrderByAggregateInput
    _max?: tools_tblMaxOrderByAggregateInput
    _min?: tools_tblMinOrderByAggregateInput
    _sum?: tools_tblSumOrderByAggregateInput
  }

  export type tools_tblScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tools_tblScalarWhereWithAggregatesInput>
    OR?: Enumerable<tools_tblScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tools_tblScalarWhereWithAggregatesInput>
    too_id?: IntWithAggregatesFilter | number
    too_name?: StringWithAggregatesFilter | string
    too_description?: StringWithAggregatesFilter | string
    too_category?: IntWithAggregatesFilter | number
    too_path?: StringWithAggregatesFilter | string
    too_project?: IntWithAggregatesFilter | number
  }

  export type users_tblCreateInput = {
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat?: number | null
    usr_token_exp?: number | null
    players_tbl?: players_tblCreateNestedManyWithoutUsers_tblInput
  }

  export type users_tblUncheckedCreateInput = {
    usr_id?: number
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat?: number | null
    usr_token_exp?: number | null
    players_tbl?: players_tblUncheckedCreateNestedManyWithoutUsers_tblInput
  }

  export type users_tblUpdateInput = {
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
    players_tbl?: players_tblUpdateManyWithoutUsers_tblInput
  }

  export type users_tblUncheckedUpdateInput = {
    usr_id?: IntFieldUpdateOperationsInput | number
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
    players_tbl?: players_tblUncheckedUpdateManyWithoutUsers_tblInput
  }

  export type users_tblCreateManyInput = {
    usr_id?: number
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat?: number | null
    usr_token_exp?: number | null
  }

  export type users_tblUpdateManyMutationInput = {
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type users_tblUncheckedUpdateManyInput = {
    usr_id?: IntFieldUpdateOperationsInput | number
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type data_tblCreateInput = {
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    tools_tbl: tools_tblCreateNestedOneWithoutData_tblInput
    players_tbl: players_tblCreateNestedOneWithoutData_tblInput
  }

  export type data_tblUncheckedCreateInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_tool: number
    dta_user: number
  }

  export type data_tblUpdateInput = {
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    tools_tbl?: tools_tblUpdateOneRequiredWithoutData_tblInput
    players_tbl?: players_tblUpdateOneRequiredWithoutData_tblInput
  }

  export type data_tblUncheckedUpdateInput = {
    dta_id?: IntFieldUpdateOperationsInput | number
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    dta_tool?: IntFieldUpdateOperationsInput | number
    dta_user?: IntFieldUpdateOperationsInput | number
  }

  export type data_tblCreateManyInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_tool: number
    dta_user: number
  }

  export type data_tblUpdateManyMutationInput = {
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
  }

  export type data_tblUncheckedUpdateManyInput = {
    dta_id?: IntFieldUpdateOperationsInput | number
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    dta_tool?: IntFieldUpdateOperationsInput | number
    dta_user?: IntFieldUpdateOperationsInput | number
  }

  export type images_tblCreateInput = {
    img_name: string
    img_path: string
    players_tbl?: players_tblCreateNestedManyWithoutImages_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblUncheckedCreateInput = {
    img_id?: number
    img_name: string
    img_path: string
    players_tbl?: players_tblUncheckedCreateNestedManyWithoutImages_tblInput
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblUpdateInput = {
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    players_tbl?: players_tblUpdateManyWithoutImages_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutImages_tblInput
  }

  export type images_tblUncheckedUpdateInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    players_tbl?: players_tblUncheckedUpdateManyWithoutImages_tblInput
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutImages_tblInput
  }

  export type images_tblCreateManyInput = {
    img_id?: number
    img_name: string
    img_path: string
  }

  export type images_tblUpdateManyMutationInput = {
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
  }

  export type images_tblUncheckedUpdateManyInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
  }

  export type players_tblCreateInput = {
    images_tbl: images_tblCreateNestedOneWithoutPlayers_tblInput
    roles_tbl: roles_tblCreateNestedOneWithoutPlayers_tblInput
    users_tbl: users_tblCreateNestedOneWithoutPlayers_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
    ply_user: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUpdateInput = {
    images_tbl?: images_tblUpdateOneRequiredWithoutPlayers_tblInput
    roles_tbl?: roles_tblUpdateOneRequiredWithoutPlayers_tblInput
    users_tbl?: users_tblUpdateOneRequiredWithoutPlayers_tblInput
    data_tbl?: data_tblUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblCreateManyInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
    ply_user: number
  }

  export type players_tblUpdateManyMutationInput = {

  }

  export type players_tblUncheckedUpdateManyInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
  }

  export type plugins_tblCreateInput = {
    plg_name: string
    plg_description: string
    plg_path: string
    tools_tbl: tools_tblCreateNestedOneWithoutPlugins_tblInput
  }

  export type plugins_tblUncheckedCreateInput = {
    plg_id?: number
    plg_name: string
    plg_description: string
    plg_path: string
    plg_tool: number
  }

  export type plugins_tblUpdateInput = {
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
    tools_tbl?: tools_tblUpdateOneRequiredWithoutPlugins_tblInput
  }

  export type plugins_tblUncheckedUpdateInput = {
    plg_id?: IntFieldUpdateOperationsInput | number
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
    plg_tool?: IntFieldUpdateOperationsInput | number
  }

  export type plugins_tblCreateManyInput = {
    plg_id?: number
    plg_name: string
    plg_description: string
    plg_path: string
    plg_tool: number
  }

  export type plugins_tblUpdateManyMutationInput = {
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
  }

  export type plugins_tblUncheckedUpdateManyInput = {
    plg_id?: IntFieldUpdateOperationsInput | number
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
    plg_tool?: IntFieldUpdateOperationsInput | number
  }

  export type projects_tblCreateInput = {
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    images_tbl: images_tblCreateNestedOneWithoutProjects_tblInput
    players_tbl: players_tblCreateNestedOneWithoutProjects_tblInput
    tools_tbl?: tools_tblCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedCreateInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_owner: number
    prj_avatar: number
    tools_tbl?: tools_tblUncheckedCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblUpdateInput = {
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    images_tbl?: images_tblUpdateOneRequiredWithoutProjects_tblInput
    players_tbl?: players_tblUpdateOneRequiredWithoutProjects_tblInput
    tools_tbl?: tools_tblUpdateManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedUpdateInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_owner?: IntFieldUpdateOperationsInput | number
    prj_avatar?: IntFieldUpdateOperationsInput | number
    tools_tbl?: tools_tblUncheckedUpdateManyWithoutProjects_tblInput
  }

  export type projects_tblCreateManyInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_owner: number
    prj_avatar: number
  }

  export type projects_tblUpdateManyMutationInput = {
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
  }

  export type projects_tblUncheckedUpdateManyInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_owner?: IntFieldUpdateOperationsInput | number
    prj_avatar?: IntFieldUpdateOperationsInput | number
  }

  export type roles_tblCreateInput = {
    rle_name: string
    rle_description: number
    players_tbl?: players_tblCreateNestedManyWithoutRoles_tblInput
  }

  export type roles_tblUncheckedCreateInput = {
    rle_id?: number
    rle_name: string
    rle_description: number
    players_tbl?: players_tblUncheckedCreateNestedManyWithoutRoles_tblInput
  }

  export type roles_tblUpdateInput = {
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
    players_tbl?: players_tblUpdateManyWithoutRoles_tblInput
  }

  export type roles_tblUncheckedUpdateInput = {
    rle_id?: IntFieldUpdateOperationsInput | number
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
    players_tbl?: players_tblUncheckedUpdateManyWithoutRoles_tblInput
  }

  export type roles_tblCreateManyInput = {
    rle_id?: number
    rle_name: string
    rle_description: number
  }

  export type roles_tblUpdateManyMutationInput = {
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
  }

  export type roles_tblUncheckedUpdateManyInput = {
    rle_id?: IntFieldUpdateOperationsInput | number
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
  }

  export type tools_tblCreateInput = {
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    projects_tbl: projects_tblCreateNestedOneWithoutTools_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedCreateInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    too_project: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUncheckedCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblUpdateInput = {
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    projects_tbl?: projects_tblUpdateOneRequiredWithoutTools_tblInput
    data_tbl?: data_tblUpdateManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUpdateManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedUpdateInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    too_project?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUncheckedUpdateManyWithoutTools_tblInput
  }

  export type tools_tblCreateManyInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    too_project: number
  }

  export type tools_tblUpdateManyMutationInput = {
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
  }

  export type tools_tblUncheckedUpdateManyInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    too_project?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Players_tblListRelationFilter = {
    every?: players_tblWhereInput
    some?: players_tblWhereInput
    none?: players_tblWhereInput
  }

  export type players_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type users_tblCountOrderByAggregateInput = {
    usr_id?: SortOrder
    usr_username?: SortOrder
    usr_mail?: SortOrder
    usr_password?: SortOrder
    usr_permissions?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
  }

  export type users_tblAvgOrderByAggregateInput = {
    usr_id?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
  }

  export type users_tblMaxOrderByAggregateInput = {
    usr_id?: SortOrder
    usr_username?: SortOrder
    usr_mail?: SortOrder
    usr_password?: SortOrder
    usr_permissions?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
  }

  export type users_tblMinOrderByAggregateInput = {
    usr_id?: SortOrder
    usr_username?: SortOrder
    usr_mail?: SortOrder
    usr_password?: SortOrder
    usr_permissions?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
  }

  export type users_tblSumOrderByAggregateInput = {
    usr_id?: SortOrder
    usr_token_iat?: SortOrder
    usr_token_exp?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type Tools_tblRelationFilter = {
    is?: tools_tblWhereInput
    isNot?: tools_tblWhereInput
  }

  export type Players_tblRelationFilter = {
    is?: players_tblWhereInput
    isNot?: players_tblWhereInput
  }

  export type data_tblCountOrderByAggregateInput = {
    dta_id?: SortOrder
    dta_date?: SortOrder
    dta_content?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
  }

  export type data_tblAvgOrderByAggregateInput = {
    dta_id?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
  }

  export type data_tblMaxOrderByAggregateInput = {
    dta_id?: SortOrder
    dta_date?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
  }

  export type data_tblMinOrderByAggregateInput = {
    dta_id?: SortOrder
    dta_date?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
  }

  export type data_tblSumOrderByAggregateInput = {
    dta_id?: SortOrder
    dta_tool?: SortOrder
    dta_user?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type Projects_tblListRelationFilter = {
    every?: projects_tblWhereInput
    some?: projects_tblWhereInput
    none?: projects_tblWhereInput
  }

  export type projects_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type images_tblCountOrderByAggregateInput = {
    img_id?: SortOrder
    img_name?: SortOrder
    img_path?: SortOrder
  }

  export type images_tblAvgOrderByAggregateInput = {
    img_id?: SortOrder
  }

  export type images_tblMaxOrderByAggregateInput = {
    img_id?: SortOrder
    img_name?: SortOrder
    img_path?: SortOrder
  }

  export type images_tblMinOrderByAggregateInput = {
    img_id?: SortOrder
    img_name?: SortOrder
    img_path?: SortOrder
  }

  export type images_tblSumOrderByAggregateInput = {
    img_id?: SortOrder
  }

  export type Images_tblRelationFilter = {
    is?: images_tblWhereInput
    isNot?: images_tblWhereInput
  }

  export type Roles_tblRelationFilter = {
    is?: roles_tblWhereInput
    isNot?: roles_tblWhereInput
  }

  export type Users_tblRelationFilter = {
    is?: users_tblWhereInput
    isNot?: users_tblWhereInput
  }

  export type Data_tblListRelationFilter = {
    every?: data_tblWhereInput
    some?: data_tblWhereInput
    none?: data_tblWhereInput
  }

  export type data_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type players_tblCountOrderByAggregateInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
  }

  export type players_tblAvgOrderByAggregateInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
  }

  export type players_tblMaxOrderByAggregateInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
  }

  export type players_tblMinOrderByAggregateInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
  }

  export type players_tblSumOrderByAggregateInput = {
    ply_id?: SortOrder
    ply_role?: SortOrder
    ply_avatar?: SortOrder
    ply_user?: SortOrder
  }

  export type plugins_tblCountOrderByAggregateInput = {
    plg_id?: SortOrder
    plg_name?: SortOrder
    plg_description?: SortOrder
    plg_path?: SortOrder
    plg_tool?: SortOrder
  }

  export type plugins_tblAvgOrderByAggregateInput = {
    plg_id?: SortOrder
    plg_tool?: SortOrder
  }

  export type plugins_tblMaxOrderByAggregateInput = {
    plg_id?: SortOrder
    plg_name?: SortOrder
    plg_description?: SortOrder
    plg_path?: SortOrder
    plg_tool?: SortOrder
  }

  export type plugins_tblMinOrderByAggregateInput = {
    plg_id?: SortOrder
    plg_name?: SortOrder
    plg_description?: SortOrder
    plg_path?: SortOrder
    plg_tool?: SortOrder
  }

  export type plugins_tblSumOrderByAggregateInput = {
    plg_id?: SortOrder
    plg_tool?: SortOrder
  }

  export type Tools_tblListRelationFilter = {
    every?: tools_tblWhereInput
    some?: tools_tblWhereInput
    none?: tools_tblWhereInput
  }

  export type tools_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type projects_tblCountOrderByAggregateInput = {
    prj_id?: SortOrder
    proj_name?: SortOrder
    prj_description?: SortOrder
    prj_config?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
  }

  export type projects_tblAvgOrderByAggregateInput = {
    prj_id?: SortOrder
    prj_description?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
  }

  export type projects_tblMaxOrderByAggregateInput = {
    prj_id?: SortOrder
    proj_name?: SortOrder
    prj_description?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
  }

  export type projects_tblMinOrderByAggregateInput = {
    prj_id?: SortOrder
    proj_name?: SortOrder
    prj_description?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
  }

  export type projects_tblSumOrderByAggregateInput = {
    prj_id?: SortOrder
    prj_description?: SortOrder
    prj_owner?: SortOrder
    prj_avatar?: SortOrder
  }

  export type roles_tblCountOrderByAggregateInput = {
    rle_id?: SortOrder
    rle_name?: SortOrder
    rle_description?: SortOrder
  }

  export type roles_tblAvgOrderByAggregateInput = {
    rle_id?: SortOrder
    rle_description?: SortOrder
  }

  export type roles_tblMaxOrderByAggregateInput = {
    rle_id?: SortOrder
    rle_name?: SortOrder
    rle_description?: SortOrder
  }

  export type roles_tblMinOrderByAggregateInput = {
    rle_id?: SortOrder
    rle_name?: SortOrder
    rle_description?: SortOrder
  }

  export type roles_tblSumOrderByAggregateInput = {
    rle_id?: SortOrder
    rle_description?: SortOrder
  }

  export type Projects_tblRelationFilter = {
    is?: projects_tblWhereInput
    isNot?: projects_tblWhereInput
  }

  export type Plugins_tblListRelationFilter = {
    every?: plugins_tblWhereInput
    some?: plugins_tblWhereInput
    none?: plugins_tblWhereInput
  }

  export type plugins_tblOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tools_tblCountOrderByAggregateInput = {
    too_id?: SortOrder
    too_name?: SortOrder
    too_description?: SortOrder
    too_category?: SortOrder
    too_path?: SortOrder
    too_project?: SortOrder
  }

  export type tools_tblAvgOrderByAggregateInput = {
    too_id?: SortOrder
    too_category?: SortOrder
    too_project?: SortOrder
  }

  export type tools_tblMaxOrderByAggregateInput = {
    too_id?: SortOrder
    too_name?: SortOrder
    too_description?: SortOrder
    too_category?: SortOrder
    too_path?: SortOrder
    too_project?: SortOrder
  }

  export type tools_tblMinOrderByAggregateInput = {
    too_id?: SortOrder
    too_name?: SortOrder
    too_description?: SortOrder
    too_category?: SortOrder
    too_path?: SortOrder
    too_project?: SortOrder
  }

  export type tools_tblSumOrderByAggregateInput = {
    too_id?: SortOrder
    too_category?: SortOrder
    too_project?: SortOrder
  }

  export type players_tblCreateNestedManyWithoutUsers_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutUsers_tblInput>, Enumerable<players_tblUncheckedCreateWithoutUsers_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutUsers_tblInput>
    createMany?: players_tblCreateManyUsers_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type players_tblUncheckedCreateNestedManyWithoutUsers_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutUsers_tblInput>, Enumerable<players_tblUncheckedCreateWithoutUsers_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutUsers_tblInput>
    createMany?: players_tblCreateManyUsers_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type players_tblUpdateManyWithoutUsers_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutUsers_tblInput>, Enumerable<players_tblUncheckedCreateWithoutUsers_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutUsers_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutUsers_tblInput>
    createMany?: players_tblCreateManyUsers_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutUsers_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutUsers_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type players_tblUncheckedUpdateManyWithoutUsers_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutUsers_tblInput>, Enumerable<players_tblUncheckedCreateWithoutUsers_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutUsers_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutUsers_tblInput>
    createMany?: players_tblCreateManyUsers_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutUsers_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutUsers_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type tools_tblCreateNestedOneWithoutData_tblInput = {
    create?: XOR<tools_tblCreateWithoutData_tblInput, tools_tblUncheckedCreateWithoutData_tblInput>
    connectOrCreate?: tools_tblCreateOrConnectWithoutData_tblInput
    connect?: tools_tblWhereUniqueInput
  }

  export type players_tblCreateNestedOneWithoutData_tblInput = {
    create?: XOR<players_tblCreateWithoutData_tblInput, players_tblUncheckedCreateWithoutData_tblInput>
    connectOrCreate?: players_tblCreateOrConnectWithoutData_tblInput
    connect?: players_tblWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type tools_tblUpdateOneRequiredWithoutData_tblInput = {
    create?: XOR<tools_tblCreateWithoutData_tblInput, tools_tblUncheckedCreateWithoutData_tblInput>
    connectOrCreate?: tools_tblCreateOrConnectWithoutData_tblInput
    upsert?: tools_tblUpsertWithoutData_tblInput
    connect?: tools_tblWhereUniqueInput
    update?: XOR<tools_tblUpdateWithoutData_tblInput, tools_tblUncheckedUpdateWithoutData_tblInput>
  }

  export type players_tblUpdateOneRequiredWithoutData_tblInput = {
    create?: XOR<players_tblCreateWithoutData_tblInput, players_tblUncheckedCreateWithoutData_tblInput>
    connectOrCreate?: players_tblCreateOrConnectWithoutData_tblInput
    upsert?: players_tblUpsertWithoutData_tblInput
    connect?: players_tblWhereUniqueInput
    update?: XOR<players_tblUpdateWithoutData_tblInput, players_tblUncheckedUpdateWithoutData_tblInput>
  }

  export type players_tblCreateNestedManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutImages_tblInput>, Enumerable<players_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutImages_tblInput>
    createMany?: players_tblCreateManyImages_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type projects_tblCreateNestedManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutImages_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutImages_tblInput>
    createMany?: projects_tblCreateManyImages_tblInputEnvelope
    connect?: Enumerable<projects_tblWhereUniqueInput>
  }

  export type players_tblUncheckedCreateNestedManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutImages_tblInput>, Enumerable<players_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutImages_tblInput>
    createMany?: players_tblCreateManyImages_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type projects_tblUncheckedCreateNestedManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutImages_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutImages_tblInput>
    createMany?: projects_tblCreateManyImages_tblInputEnvelope
    connect?: Enumerable<projects_tblWhereUniqueInput>
  }

  export type players_tblUpdateManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutImages_tblInput>, Enumerable<players_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutImages_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutImages_tblInput>
    createMany?: players_tblCreateManyImages_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutImages_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutImages_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type projects_tblUpdateManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutImages_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutImages_tblInput>
    upsert?: Enumerable<projects_tblUpsertWithWhereUniqueWithoutImages_tblInput>
    createMany?: projects_tblCreateManyImages_tblInputEnvelope
    set?: Enumerable<projects_tblWhereUniqueInput>
    disconnect?: Enumerable<projects_tblWhereUniqueInput>
    delete?: Enumerable<projects_tblWhereUniqueInput>
    connect?: Enumerable<projects_tblWhereUniqueInput>
    update?: Enumerable<projects_tblUpdateWithWhereUniqueWithoutImages_tblInput>
    updateMany?: Enumerable<projects_tblUpdateManyWithWhereWithoutImages_tblInput>
    deleteMany?: Enumerable<projects_tblScalarWhereInput>
  }

  export type players_tblUncheckedUpdateManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutImages_tblInput>, Enumerable<players_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutImages_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutImages_tblInput>
    createMany?: players_tblCreateManyImages_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutImages_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutImages_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type projects_tblUncheckedUpdateManyWithoutImages_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutImages_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutImages_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutImages_tblInput>
    upsert?: Enumerable<projects_tblUpsertWithWhereUniqueWithoutImages_tblInput>
    createMany?: projects_tblCreateManyImages_tblInputEnvelope
    set?: Enumerable<projects_tblWhereUniqueInput>
    disconnect?: Enumerable<projects_tblWhereUniqueInput>
    delete?: Enumerable<projects_tblWhereUniqueInput>
    connect?: Enumerable<projects_tblWhereUniqueInput>
    update?: Enumerable<projects_tblUpdateWithWhereUniqueWithoutImages_tblInput>
    updateMany?: Enumerable<projects_tblUpdateManyWithWhereWithoutImages_tblInput>
    deleteMany?: Enumerable<projects_tblScalarWhereInput>
  }

  export type images_tblCreateNestedOneWithoutPlayers_tblInput = {
    create?: XOR<images_tblCreateWithoutPlayers_tblInput, images_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: images_tblCreateOrConnectWithoutPlayers_tblInput
    connect?: images_tblWhereUniqueInput
  }

  export type roles_tblCreateNestedOneWithoutPlayers_tblInput = {
    create?: XOR<roles_tblCreateWithoutPlayers_tblInput, roles_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: roles_tblCreateOrConnectWithoutPlayers_tblInput
    connect?: roles_tblWhereUniqueInput
  }

  export type users_tblCreateNestedOneWithoutPlayers_tblInput = {
    create?: XOR<users_tblCreateWithoutPlayers_tblInput, users_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: users_tblCreateOrConnectWithoutPlayers_tblInput
    connect?: users_tblWhereUniqueInput
  }

  export type data_tblCreateNestedManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutPlayers_tblInput>, Enumerable<data_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutPlayers_tblInput>
    createMany?: data_tblCreateManyPlayers_tblInputEnvelope
    connect?: Enumerable<data_tblWhereUniqueInput>
  }

  export type projects_tblCreateNestedManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutPlayers_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutPlayers_tblInput>
    createMany?: projects_tblCreateManyPlayers_tblInputEnvelope
    connect?: Enumerable<projects_tblWhereUniqueInput>
  }

  export type data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutPlayers_tblInput>, Enumerable<data_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutPlayers_tblInput>
    createMany?: data_tblCreateManyPlayers_tblInputEnvelope
    connect?: Enumerable<data_tblWhereUniqueInput>
  }

  export type projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutPlayers_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutPlayers_tblInput>
    createMany?: projects_tblCreateManyPlayers_tblInputEnvelope
    connect?: Enumerable<projects_tblWhereUniqueInput>
  }

  export type images_tblUpdateOneRequiredWithoutPlayers_tblInput = {
    create?: XOR<images_tblCreateWithoutPlayers_tblInput, images_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: images_tblCreateOrConnectWithoutPlayers_tblInput
    upsert?: images_tblUpsertWithoutPlayers_tblInput
    connect?: images_tblWhereUniqueInput
    update?: XOR<images_tblUpdateWithoutPlayers_tblInput, images_tblUncheckedUpdateWithoutPlayers_tblInput>
  }

  export type roles_tblUpdateOneRequiredWithoutPlayers_tblInput = {
    create?: XOR<roles_tblCreateWithoutPlayers_tblInput, roles_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: roles_tblCreateOrConnectWithoutPlayers_tblInput
    upsert?: roles_tblUpsertWithoutPlayers_tblInput
    connect?: roles_tblWhereUniqueInput
    update?: XOR<roles_tblUpdateWithoutPlayers_tblInput, roles_tblUncheckedUpdateWithoutPlayers_tblInput>
  }

  export type users_tblUpdateOneRequiredWithoutPlayers_tblInput = {
    create?: XOR<users_tblCreateWithoutPlayers_tblInput, users_tblUncheckedCreateWithoutPlayers_tblInput>
    connectOrCreate?: users_tblCreateOrConnectWithoutPlayers_tblInput
    upsert?: users_tblUpsertWithoutPlayers_tblInput
    connect?: users_tblWhereUniqueInput
    update?: XOR<users_tblUpdateWithoutPlayers_tblInput, users_tblUncheckedUpdateWithoutPlayers_tblInput>
  }

  export type data_tblUpdateManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutPlayers_tblInput>, Enumerable<data_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutPlayers_tblInput>
    upsert?: Enumerable<data_tblUpsertWithWhereUniqueWithoutPlayers_tblInput>
    createMany?: data_tblCreateManyPlayers_tblInputEnvelope
    set?: Enumerable<data_tblWhereUniqueInput>
    disconnect?: Enumerable<data_tblWhereUniqueInput>
    delete?: Enumerable<data_tblWhereUniqueInput>
    connect?: Enumerable<data_tblWhereUniqueInput>
    update?: Enumerable<data_tblUpdateWithWhereUniqueWithoutPlayers_tblInput>
    updateMany?: Enumerable<data_tblUpdateManyWithWhereWithoutPlayers_tblInput>
    deleteMany?: Enumerable<data_tblScalarWhereInput>
  }

  export type projects_tblUpdateManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutPlayers_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutPlayers_tblInput>
    upsert?: Enumerable<projects_tblUpsertWithWhereUniqueWithoutPlayers_tblInput>
    createMany?: projects_tblCreateManyPlayers_tblInputEnvelope
    set?: Enumerable<projects_tblWhereUniqueInput>
    disconnect?: Enumerable<projects_tblWhereUniqueInput>
    delete?: Enumerable<projects_tblWhereUniqueInput>
    connect?: Enumerable<projects_tblWhereUniqueInput>
    update?: Enumerable<projects_tblUpdateWithWhereUniqueWithoutPlayers_tblInput>
    updateMany?: Enumerable<projects_tblUpdateManyWithWhereWithoutPlayers_tblInput>
    deleteMany?: Enumerable<projects_tblScalarWhereInput>
  }

  export type data_tblUncheckedUpdateManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutPlayers_tblInput>, Enumerable<data_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutPlayers_tblInput>
    upsert?: Enumerable<data_tblUpsertWithWhereUniqueWithoutPlayers_tblInput>
    createMany?: data_tblCreateManyPlayers_tblInputEnvelope
    set?: Enumerable<data_tblWhereUniqueInput>
    disconnect?: Enumerable<data_tblWhereUniqueInput>
    delete?: Enumerable<data_tblWhereUniqueInput>
    connect?: Enumerable<data_tblWhereUniqueInput>
    update?: Enumerable<data_tblUpdateWithWhereUniqueWithoutPlayers_tblInput>
    updateMany?: Enumerable<data_tblUpdateManyWithWhereWithoutPlayers_tblInput>
    deleteMany?: Enumerable<data_tblScalarWhereInput>
  }

  export type projects_tblUncheckedUpdateManyWithoutPlayers_tblInput = {
    create?: XOR<Enumerable<projects_tblCreateWithoutPlayers_tblInput>, Enumerable<projects_tblUncheckedCreateWithoutPlayers_tblInput>>
    connectOrCreate?: Enumerable<projects_tblCreateOrConnectWithoutPlayers_tblInput>
    upsert?: Enumerable<projects_tblUpsertWithWhereUniqueWithoutPlayers_tblInput>
    createMany?: projects_tblCreateManyPlayers_tblInputEnvelope
    set?: Enumerable<projects_tblWhereUniqueInput>
    disconnect?: Enumerable<projects_tblWhereUniqueInput>
    delete?: Enumerable<projects_tblWhereUniqueInput>
    connect?: Enumerable<projects_tblWhereUniqueInput>
    update?: Enumerable<projects_tblUpdateWithWhereUniqueWithoutPlayers_tblInput>
    updateMany?: Enumerable<projects_tblUpdateManyWithWhereWithoutPlayers_tblInput>
    deleteMany?: Enumerable<projects_tblScalarWhereInput>
  }

  export type tools_tblCreateNestedOneWithoutPlugins_tblInput = {
    create?: XOR<tools_tblCreateWithoutPlugins_tblInput, tools_tblUncheckedCreateWithoutPlugins_tblInput>
    connectOrCreate?: tools_tblCreateOrConnectWithoutPlugins_tblInput
    connect?: tools_tblWhereUniqueInput
  }

  export type tools_tblUpdateOneRequiredWithoutPlugins_tblInput = {
    create?: XOR<tools_tblCreateWithoutPlugins_tblInput, tools_tblUncheckedCreateWithoutPlugins_tblInput>
    connectOrCreate?: tools_tblCreateOrConnectWithoutPlugins_tblInput
    upsert?: tools_tblUpsertWithoutPlugins_tblInput
    connect?: tools_tblWhereUniqueInput
    update?: XOR<tools_tblUpdateWithoutPlugins_tblInput, tools_tblUncheckedUpdateWithoutPlugins_tblInput>
  }

  export type images_tblCreateNestedOneWithoutProjects_tblInput = {
    create?: XOR<images_tblCreateWithoutProjects_tblInput, images_tblUncheckedCreateWithoutProjects_tblInput>
    connectOrCreate?: images_tblCreateOrConnectWithoutProjects_tblInput
    connect?: images_tblWhereUniqueInput
  }

  export type players_tblCreateNestedOneWithoutProjects_tblInput = {
    create?: XOR<players_tblCreateWithoutProjects_tblInput, players_tblUncheckedCreateWithoutProjects_tblInput>
    connectOrCreate?: players_tblCreateOrConnectWithoutProjects_tblInput
    connect?: players_tblWhereUniqueInput
  }

  export type tools_tblCreateNestedManyWithoutProjects_tblInput = {
    create?: XOR<Enumerable<tools_tblCreateWithoutProjects_tblInput>, Enumerable<tools_tblUncheckedCreateWithoutProjects_tblInput>>
    connectOrCreate?: Enumerable<tools_tblCreateOrConnectWithoutProjects_tblInput>
    createMany?: tools_tblCreateManyProjects_tblInputEnvelope
    connect?: Enumerable<tools_tblWhereUniqueInput>
  }

  export type tools_tblUncheckedCreateNestedManyWithoutProjects_tblInput = {
    create?: XOR<Enumerable<tools_tblCreateWithoutProjects_tblInput>, Enumerable<tools_tblUncheckedCreateWithoutProjects_tblInput>>
    connectOrCreate?: Enumerable<tools_tblCreateOrConnectWithoutProjects_tblInput>
    createMany?: tools_tblCreateManyProjects_tblInputEnvelope
    connect?: Enumerable<tools_tblWhereUniqueInput>
  }

  export type images_tblUpdateOneRequiredWithoutProjects_tblInput = {
    create?: XOR<images_tblCreateWithoutProjects_tblInput, images_tblUncheckedCreateWithoutProjects_tblInput>
    connectOrCreate?: images_tblCreateOrConnectWithoutProjects_tblInput
    upsert?: images_tblUpsertWithoutProjects_tblInput
    connect?: images_tblWhereUniqueInput
    update?: XOR<images_tblUpdateWithoutProjects_tblInput, images_tblUncheckedUpdateWithoutProjects_tblInput>
  }

  export type players_tblUpdateOneRequiredWithoutProjects_tblInput = {
    create?: XOR<players_tblCreateWithoutProjects_tblInput, players_tblUncheckedCreateWithoutProjects_tblInput>
    connectOrCreate?: players_tblCreateOrConnectWithoutProjects_tblInput
    upsert?: players_tblUpsertWithoutProjects_tblInput
    connect?: players_tblWhereUniqueInput
    update?: XOR<players_tblUpdateWithoutProjects_tblInput, players_tblUncheckedUpdateWithoutProjects_tblInput>
  }

  export type tools_tblUpdateManyWithoutProjects_tblInput = {
    create?: XOR<Enumerable<tools_tblCreateWithoutProjects_tblInput>, Enumerable<tools_tblUncheckedCreateWithoutProjects_tblInput>>
    connectOrCreate?: Enumerable<tools_tblCreateOrConnectWithoutProjects_tblInput>
    upsert?: Enumerable<tools_tblUpsertWithWhereUniqueWithoutProjects_tblInput>
    createMany?: tools_tblCreateManyProjects_tblInputEnvelope
    set?: Enumerable<tools_tblWhereUniqueInput>
    disconnect?: Enumerable<tools_tblWhereUniqueInput>
    delete?: Enumerable<tools_tblWhereUniqueInput>
    connect?: Enumerable<tools_tblWhereUniqueInput>
    update?: Enumerable<tools_tblUpdateWithWhereUniqueWithoutProjects_tblInput>
    updateMany?: Enumerable<tools_tblUpdateManyWithWhereWithoutProjects_tblInput>
    deleteMany?: Enumerable<tools_tblScalarWhereInput>
  }

  export type tools_tblUncheckedUpdateManyWithoutProjects_tblInput = {
    create?: XOR<Enumerable<tools_tblCreateWithoutProjects_tblInput>, Enumerable<tools_tblUncheckedCreateWithoutProjects_tblInput>>
    connectOrCreate?: Enumerable<tools_tblCreateOrConnectWithoutProjects_tblInput>
    upsert?: Enumerable<tools_tblUpsertWithWhereUniqueWithoutProjects_tblInput>
    createMany?: tools_tblCreateManyProjects_tblInputEnvelope
    set?: Enumerable<tools_tblWhereUniqueInput>
    disconnect?: Enumerable<tools_tblWhereUniqueInput>
    delete?: Enumerable<tools_tblWhereUniqueInput>
    connect?: Enumerable<tools_tblWhereUniqueInput>
    update?: Enumerable<tools_tblUpdateWithWhereUniqueWithoutProjects_tblInput>
    updateMany?: Enumerable<tools_tblUpdateManyWithWhereWithoutProjects_tblInput>
    deleteMany?: Enumerable<tools_tblScalarWhereInput>
  }

  export type players_tblCreateNestedManyWithoutRoles_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutRoles_tblInput>, Enumerable<players_tblUncheckedCreateWithoutRoles_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutRoles_tblInput>
    createMany?: players_tblCreateManyRoles_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type players_tblUncheckedCreateNestedManyWithoutRoles_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutRoles_tblInput>, Enumerable<players_tblUncheckedCreateWithoutRoles_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutRoles_tblInput>
    createMany?: players_tblCreateManyRoles_tblInputEnvelope
    connect?: Enumerable<players_tblWhereUniqueInput>
  }

  export type players_tblUpdateManyWithoutRoles_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutRoles_tblInput>, Enumerable<players_tblUncheckedCreateWithoutRoles_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutRoles_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutRoles_tblInput>
    createMany?: players_tblCreateManyRoles_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutRoles_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutRoles_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type players_tblUncheckedUpdateManyWithoutRoles_tblInput = {
    create?: XOR<Enumerable<players_tblCreateWithoutRoles_tblInput>, Enumerable<players_tblUncheckedCreateWithoutRoles_tblInput>>
    connectOrCreate?: Enumerable<players_tblCreateOrConnectWithoutRoles_tblInput>
    upsert?: Enumerable<players_tblUpsertWithWhereUniqueWithoutRoles_tblInput>
    createMany?: players_tblCreateManyRoles_tblInputEnvelope
    set?: Enumerable<players_tblWhereUniqueInput>
    disconnect?: Enumerable<players_tblWhereUniqueInput>
    delete?: Enumerable<players_tblWhereUniqueInput>
    connect?: Enumerable<players_tblWhereUniqueInput>
    update?: Enumerable<players_tblUpdateWithWhereUniqueWithoutRoles_tblInput>
    updateMany?: Enumerable<players_tblUpdateManyWithWhereWithoutRoles_tblInput>
    deleteMany?: Enumerable<players_tblScalarWhereInput>
  }

  export type projects_tblCreateNestedOneWithoutTools_tblInput = {
    create?: XOR<projects_tblCreateWithoutTools_tblInput, projects_tblUncheckedCreateWithoutTools_tblInput>
    connectOrCreate?: projects_tblCreateOrConnectWithoutTools_tblInput
    connect?: projects_tblWhereUniqueInput
  }

  export type data_tblCreateNestedManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutTools_tblInput>, Enumerable<data_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutTools_tblInput>
    createMany?: data_tblCreateManyTools_tblInputEnvelope
    connect?: Enumerable<data_tblWhereUniqueInput>
  }

  export type plugins_tblCreateNestedManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<plugins_tblCreateWithoutTools_tblInput>, Enumerable<plugins_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<plugins_tblCreateOrConnectWithoutTools_tblInput>
    createMany?: plugins_tblCreateManyTools_tblInputEnvelope
    connect?: Enumerable<plugins_tblWhereUniqueInput>
  }

  export type data_tblUncheckedCreateNestedManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutTools_tblInput>, Enumerable<data_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutTools_tblInput>
    createMany?: data_tblCreateManyTools_tblInputEnvelope
    connect?: Enumerable<data_tblWhereUniqueInput>
  }

  export type plugins_tblUncheckedCreateNestedManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<plugins_tblCreateWithoutTools_tblInput>, Enumerable<plugins_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<plugins_tblCreateOrConnectWithoutTools_tblInput>
    createMany?: plugins_tblCreateManyTools_tblInputEnvelope
    connect?: Enumerable<plugins_tblWhereUniqueInput>
  }

  export type projects_tblUpdateOneRequiredWithoutTools_tblInput = {
    create?: XOR<projects_tblCreateWithoutTools_tblInput, projects_tblUncheckedCreateWithoutTools_tblInput>
    connectOrCreate?: projects_tblCreateOrConnectWithoutTools_tblInput
    upsert?: projects_tblUpsertWithoutTools_tblInput
    connect?: projects_tblWhereUniqueInput
    update?: XOR<projects_tblUpdateWithoutTools_tblInput, projects_tblUncheckedUpdateWithoutTools_tblInput>
  }

  export type data_tblUpdateManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutTools_tblInput>, Enumerable<data_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutTools_tblInput>
    upsert?: Enumerable<data_tblUpsertWithWhereUniqueWithoutTools_tblInput>
    createMany?: data_tblCreateManyTools_tblInputEnvelope
    set?: Enumerable<data_tblWhereUniqueInput>
    disconnect?: Enumerable<data_tblWhereUniqueInput>
    delete?: Enumerable<data_tblWhereUniqueInput>
    connect?: Enumerable<data_tblWhereUniqueInput>
    update?: Enumerable<data_tblUpdateWithWhereUniqueWithoutTools_tblInput>
    updateMany?: Enumerable<data_tblUpdateManyWithWhereWithoutTools_tblInput>
    deleteMany?: Enumerable<data_tblScalarWhereInput>
  }

  export type plugins_tblUpdateManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<plugins_tblCreateWithoutTools_tblInput>, Enumerable<plugins_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<plugins_tblCreateOrConnectWithoutTools_tblInput>
    upsert?: Enumerable<plugins_tblUpsertWithWhereUniqueWithoutTools_tblInput>
    createMany?: plugins_tblCreateManyTools_tblInputEnvelope
    set?: Enumerable<plugins_tblWhereUniqueInput>
    disconnect?: Enumerable<plugins_tblWhereUniqueInput>
    delete?: Enumerable<plugins_tblWhereUniqueInput>
    connect?: Enumerable<plugins_tblWhereUniqueInput>
    update?: Enumerable<plugins_tblUpdateWithWhereUniqueWithoutTools_tblInput>
    updateMany?: Enumerable<plugins_tblUpdateManyWithWhereWithoutTools_tblInput>
    deleteMany?: Enumerable<plugins_tblScalarWhereInput>
  }

  export type data_tblUncheckedUpdateManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<data_tblCreateWithoutTools_tblInput>, Enumerable<data_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<data_tblCreateOrConnectWithoutTools_tblInput>
    upsert?: Enumerable<data_tblUpsertWithWhereUniqueWithoutTools_tblInput>
    createMany?: data_tblCreateManyTools_tblInputEnvelope
    set?: Enumerable<data_tblWhereUniqueInput>
    disconnect?: Enumerable<data_tblWhereUniqueInput>
    delete?: Enumerable<data_tblWhereUniqueInput>
    connect?: Enumerable<data_tblWhereUniqueInput>
    update?: Enumerable<data_tblUpdateWithWhereUniqueWithoutTools_tblInput>
    updateMany?: Enumerable<data_tblUpdateManyWithWhereWithoutTools_tblInput>
    deleteMany?: Enumerable<data_tblScalarWhereInput>
  }

  export type plugins_tblUncheckedUpdateManyWithoutTools_tblInput = {
    create?: XOR<Enumerable<plugins_tblCreateWithoutTools_tblInput>, Enumerable<plugins_tblUncheckedCreateWithoutTools_tblInput>>
    connectOrCreate?: Enumerable<plugins_tblCreateOrConnectWithoutTools_tblInput>
    upsert?: Enumerable<plugins_tblUpsertWithWhereUniqueWithoutTools_tblInput>
    createMany?: plugins_tblCreateManyTools_tblInputEnvelope
    set?: Enumerable<plugins_tblWhereUniqueInput>
    disconnect?: Enumerable<plugins_tblWhereUniqueInput>
    delete?: Enumerable<plugins_tblWhereUniqueInput>
    connect?: Enumerable<plugins_tblWhereUniqueInput>
    update?: Enumerable<plugins_tblUpdateWithWhereUniqueWithoutTools_tblInput>
    updateMany?: Enumerable<plugins_tblUpdateManyWithWhereWithoutTools_tblInput>
    deleteMany?: Enumerable<plugins_tblScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type players_tblCreateWithoutUsers_tblInput = {
    images_tbl: images_tblCreateNestedOneWithoutPlayers_tblInput
    roles_tbl: roles_tblCreateNestedOneWithoutPlayers_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateWithoutUsers_tblInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblCreateOrConnectWithoutUsers_tblInput = {
    where: players_tblWhereUniqueInput
    create: XOR<players_tblCreateWithoutUsers_tblInput, players_tblUncheckedCreateWithoutUsers_tblInput>
  }

  export type players_tblCreateManyUsers_tblInputEnvelope = {
    data: Enumerable<players_tblCreateManyUsers_tblInput>
    skipDuplicates?: boolean
  }

  export type players_tblUpsertWithWhereUniqueWithoutUsers_tblInput = {
    where: players_tblWhereUniqueInput
    update: XOR<players_tblUpdateWithoutUsers_tblInput, players_tblUncheckedUpdateWithoutUsers_tblInput>
    create: XOR<players_tblCreateWithoutUsers_tblInput, players_tblUncheckedCreateWithoutUsers_tblInput>
  }

  export type players_tblUpdateWithWhereUniqueWithoutUsers_tblInput = {
    where: players_tblWhereUniqueInput
    data: XOR<players_tblUpdateWithoutUsers_tblInput, players_tblUncheckedUpdateWithoutUsers_tblInput>
  }

  export type players_tblUpdateManyWithWhereWithoutUsers_tblInput = {
    where: players_tblScalarWhereInput
    data: XOR<players_tblUpdateManyMutationInput, players_tblUncheckedUpdateManyWithoutPlayers_tblInput>
  }

  export type players_tblScalarWhereInput = {
    AND?: Enumerable<players_tblScalarWhereInput>
    OR?: Enumerable<players_tblScalarWhereInput>
    NOT?: Enumerable<players_tblScalarWhereInput>
    ply_id?: IntFilter | number
    ply_role?: IntFilter | number
    ply_avatar?: IntFilter | number
    ply_user?: IntFilter | number
  }

  export type tools_tblCreateWithoutData_tblInput = {
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    projects_tbl: projects_tblCreateNestedOneWithoutTools_tblInput
    plugins_tbl?: plugins_tblCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedCreateWithoutData_tblInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    too_project: number
    plugins_tbl?: plugins_tblUncheckedCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblCreateOrConnectWithoutData_tblInput = {
    where: tools_tblWhereUniqueInput
    create: XOR<tools_tblCreateWithoutData_tblInput, tools_tblUncheckedCreateWithoutData_tblInput>
  }

  export type players_tblCreateWithoutData_tblInput = {
    images_tbl: images_tblCreateNestedOneWithoutPlayers_tblInput
    roles_tbl: roles_tblCreateNestedOneWithoutPlayers_tblInput
    users_tbl: users_tblCreateNestedOneWithoutPlayers_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateWithoutData_tblInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
    ply_user: number
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblCreateOrConnectWithoutData_tblInput = {
    where: players_tblWhereUniqueInput
    create: XOR<players_tblCreateWithoutData_tblInput, players_tblUncheckedCreateWithoutData_tblInput>
  }

  export type tools_tblUpsertWithoutData_tblInput = {
    update: XOR<tools_tblUpdateWithoutData_tblInput, tools_tblUncheckedUpdateWithoutData_tblInput>
    create: XOR<tools_tblCreateWithoutData_tblInput, tools_tblUncheckedCreateWithoutData_tblInput>
  }

  export type tools_tblUpdateWithoutData_tblInput = {
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    projects_tbl?: projects_tblUpdateOneRequiredWithoutTools_tblInput
    plugins_tbl?: plugins_tblUpdateManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedUpdateWithoutData_tblInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    too_project?: IntFieldUpdateOperationsInput | number
    plugins_tbl?: plugins_tblUncheckedUpdateManyWithoutTools_tblInput
  }

  export type players_tblUpsertWithoutData_tblInput = {
    update: XOR<players_tblUpdateWithoutData_tblInput, players_tblUncheckedUpdateWithoutData_tblInput>
    create: XOR<players_tblCreateWithoutData_tblInput, players_tblUncheckedCreateWithoutData_tblInput>
  }

  export type players_tblUpdateWithoutData_tblInput = {
    images_tbl?: images_tblUpdateOneRequiredWithoutPlayers_tblInput
    roles_tbl?: roles_tblUpdateOneRequiredWithoutPlayers_tblInput
    users_tbl?: users_tblUpdateOneRequiredWithoutPlayers_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateWithoutData_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblCreateWithoutImages_tblInput = {
    roles_tbl: roles_tblCreateNestedOneWithoutPlayers_tblInput
    users_tbl: users_tblCreateNestedOneWithoutPlayers_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateWithoutImages_tblInput = {
    ply_id?: number
    ply_role: number
    ply_user: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblCreateOrConnectWithoutImages_tblInput = {
    where: players_tblWhereUniqueInput
    create: XOR<players_tblCreateWithoutImages_tblInput, players_tblUncheckedCreateWithoutImages_tblInput>
  }

  export type players_tblCreateManyImages_tblInputEnvelope = {
    data: Enumerable<players_tblCreateManyImages_tblInput>
    skipDuplicates?: boolean
  }

  export type projects_tblCreateWithoutImages_tblInput = {
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    players_tbl: players_tblCreateNestedOneWithoutProjects_tblInput
    tools_tbl?: tools_tblCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedCreateWithoutImages_tblInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_owner: number
    tools_tbl?: tools_tblUncheckedCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblCreateOrConnectWithoutImages_tblInput = {
    where: projects_tblWhereUniqueInput
    create: XOR<projects_tblCreateWithoutImages_tblInput, projects_tblUncheckedCreateWithoutImages_tblInput>
  }

  export type projects_tblCreateManyImages_tblInputEnvelope = {
    data: Enumerable<projects_tblCreateManyImages_tblInput>
    skipDuplicates?: boolean
  }

  export type players_tblUpsertWithWhereUniqueWithoutImages_tblInput = {
    where: players_tblWhereUniqueInput
    update: XOR<players_tblUpdateWithoutImages_tblInput, players_tblUncheckedUpdateWithoutImages_tblInput>
    create: XOR<players_tblCreateWithoutImages_tblInput, players_tblUncheckedCreateWithoutImages_tblInput>
  }

  export type players_tblUpdateWithWhereUniqueWithoutImages_tblInput = {
    where: players_tblWhereUniqueInput
    data: XOR<players_tblUpdateWithoutImages_tblInput, players_tblUncheckedUpdateWithoutImages_tblInput>
  }

  export type players_tblUpdateManyWithWhereWithoutImages_tblInput = {
    where: players_tblScalarWhereInput
    data: XOR<players_tblUpdateManyMutationInput, players_tblUncheckedUpdateManyWithoutPlayers_tblInput>
  }

  export type projects_tblUpsertWithWhereUniqueWithoutImages_tblInput = {
    where: projects_tblWhereUniqueInput
    update: XOR<projects_tblUpdateWithoutImages_tblInput, projects_tblUncheckedUpdateWithoutImages_tblInput>
    create: XOR<projects_tblCreateWithoutImages_tblInput, projects_tblUncheckedCreateWithoutImages_tblInput>
  }

  export type projects_tblUpdateWithWhereUniqueWithoutImages_tblInput = {
    where: projects_tblWhereUniqueInput
    data: XOR<projects_tblUpdateWithoutImages_tblInput, projects_tblUncheckedUpdateWithoutImages_tblInput>
  }

  export type projects_tblUpdateManyWithWhereWithoutImages_tblInput = {
    where: projects_tblScalarWhereInput
    data: XOR<projects_tblUpdateManyMutationInput, projects_tblUncheckedUpdateManyWithoutProjects_tblInput>
  }

  export type projects_tblScalarWhereInput = {
    AND?: Enumerable<projects_tblScalarWhereInput>
    OR?: Enumerable<projects_tblScalarWhereInput>
    NOT?: Enumerable<projects_tblScalarWhereInput>
    prj_id?: IntFilter | number
    proj_name?: StringFilter | string
    prj_description?: IntFilter | number
    prj_config?: JsonFilter
    prj_owner?: IntFilter | number
    prj_avatar?: IntFilter | number
  }

  export type images_tblCreateWithoutPlayers_tblInput = {
    img_name: string
    img_path: string
    projects_tbl?: projects_tblCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblUncheckedCreateWithoutPlayers_tblInput = {
    img_id?: number
    img_name: string
    img_path: string
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblCreateOrConnectWithoutPlayers_tblInput = {
    where: images_tblWhereUniqueInput
    create: XOR<images_tblCreateWithoutPlayers_tblInput, images_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type roles_tblCreateWithoutPlayers_tblInput = {
    rle_name: string
    rle_description: number
  }

  export type roles_tblUncheckedCreateWithoutPlayers_tblInput = {
    rle_id?: number
    rle_name: string
    rle_description: number
  }

  export type roles_tblCreateOrConnectWithoutPlayers_tblInput = {
    where: roles_tblWhereUniqueInput
    create: XOR<roles_tblCreateWithoutPlayers_tblInput, roles_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type users_tblCreateWithoutPlayers_tblInput = {
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat?: number | null
    usr_token_exp?: number | null
  }

  export type users_tblUncheckedCreateWithoutPlayers_tblInput = {
    usr_id?: number
    usr_username: string
    usr_mail: string
    usr_password: string
    usr_permissions: boolean
    usr_token_iat?: number | null
    usr_token_exp?: number | null
  }

  export type users_tblCreateOrConnectWithoutPlayers_tblInput = {
    where: users_tblWhereUniqueInput
    create: XOR<users_tblCreateWithoutPlayers_tblInput, users_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type data_tblCreateWithoutPlayers_tblInput = {
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    tools_tbl: tools_tblCreateNestedOneWithoutData_tblInput
  }

  export type data_tblUncheckedCreateWithoutPlayers_tblInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_tool: number
  }

  export type data_tblCreateOrConnectWithoutPlayers_tblInput = {
    where: data_tblWhereUniqueInput
    create: XOR<data_tblCreateWithoutPlayers_tblInput, data_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type data_tblCreateManyPlayers_tblInputEnvelope = {
    data: Enumerable<data_tblCreateManyPlayers_tblInput>
    skipDuplicates?: boolean
  }

  export type projects_tblCreateWithoutPlayers_tblInput = {
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    images_tbl: images_tblCreateNestedOneWithoutProjects_tblInput
    tools_tbl?: tools_tblCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedCreateWithoutPlayers_tblInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_avatar: number
    tools_tbl?: tools_tblUncheckedCreateNestedManyWithoutProjects_tblInput
  }

  export type projects_tblCreateOrConnectWithoutPlayers_tblInput = {
    where: projects_tblWhereUniqueInput
    create: XOR<projects_tblCreateWithoutPlayers_tblInput, projects_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type projects_tblCreateManyPlayers_tblInputEnvelope = {
    data: Enumerable<projects_tblCreateManyPlayers_tblInput>
    skipDuplicates?: boolean
  }

  export type images_tblUpsertWithoutPlayers_tblInput = {
    update: XOR<images_tblUpdateWithoutPlayers_tblInput, images_tblUncheckedUpdateWithoutPlayers_tblInput>
    create: XOR<images_tblCreateWithoutPlayers_tblInput, images_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type images_tblUpdateWithoutPlayers_tblInput = {
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    projects_tbl?: projects_tblUpdateManyWithoutImages_tblInput
  }

  export type images_tblUncheckedUpdateWithoutPlayers_tblInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutImages_tblInput
  }

  export type roles_tblUpsertWithoutPlayers_tblInput = {
    update: XOR<roles_tblUpdateWithoutPlayers_tblInput, roles_tblUncheckedUpdateWithoutPlayers_tblInput>
    create: XOR<roles_tblCreateWithoutPlayers_tblInput, roles_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type roles_tblUpdateWithoutPlayers_tblInput = {
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
  }

  export type roles_tblUncheckedUpdateWithoutPlayers_tblInput = {
    rle_id?: IntFieldUpdateOperationsInput | number
    rle_name?: StringFieldUpdateOperationsInput | string
    rle_description?: IntFieldUpdateOperationsInput | number
  }

  export type users_tblUpsertWithoutPlayers_tblInput = {
    update: XOR<users_tblUpdateWithoutPlayers_tblInput, users_tblUncheckedUpdateWithoutPlayers_tblInput>
    create: XOR<users_tblCreateWithoutPlayers_tblInput, users_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type users_tblUpdateWithoutPlayers_tblInput = {
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type users_tblUncheckedUpdateWithoutPlayers_tblInput = {
    usr_id?: IntFieldUpdateOperationsInput | number
    usr_username?: StringFieldUpdateOperationsInput | string
    usr_mail?: StringFieldUpdateOperationsInput | string
    usr_password?: StringFieldUpdateOperationsInput | string
    usr_permissions?: BoolFieldUpdateOperationsInput | boolean
    usr_token_iat?: NullableIntFieldUpdateOperationsInput | number | null
    usr_token_exp?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type data_tblUpsertWithWhereUniqueWithoutPlayers_tblInput = {
    where: data_tblWhereUniqueInput
    update: XOR<data_tblUpdateWithoutPlayers_tblInput, data_tblUncheckedUpdateWithoutPlayers_tblInput>
    create: XOR<data_tblCreateWithoutPlayers_tblInput, data_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type data_tblUpdateWithWhereUniqueWithoutPlayers_tblInput = {
    where: data_tblWhereUniqueInput
    data: XOR<data_tblUpdateWithoutPlayers_tblInput, data_tblUncheckedUpdateWithoutPlayers_tblInput>
  }

  export type data_tblUpdateManyWithWhereWithoutPlayers_tblInput = {
    where: data_tblScalarWhereInput
    data: XOR<data_tblUpdateManyMutationInput, data_tblUncheckedUpdateManyWithoutData_tblInput>
  }

  export type data_tblScalarWhereInput = {
    AND?: Enumerable<data_tblScalarWhereInput>
    OR?: Enumerable<data_tblScalarWhereInput>
    NOT?: Enumerable<data_tblScalarWhereInput>
    dta_id?: IntFilter | number
    dta_date?: DateTimeFilter | Date | string
    dta_content?: JsonFilter
    dta_tool?: IntFilter | number
    dta_user?: IntFilter | number
  }

  export type projects_tblUpsertWithWhereUniqueWithoutPlayers_tblInput = {
    where: projects_tblWhereUniqueInput
    update: XOR<projects_tblUpdateWithoutPlayers_tblInput, projects_tblUncheckedUpdateWithoutPlayers_tblInput>
    create: XOR<projects_tblCreateWithoutPlayers_tblInput, projects_tblUncheckedCreateWithoutPlayers_tblInput>
  }

  export type projects_tblUpdateWithWhereUniqueWithoutPlayers_tblInput = {
    where: projects_tblWhereUniqueInput
    data: XOR<projects_tblUpdateWithoutPlayers_tblInput, projects_tblUncheckedUpdateWithoutPlayers_tblInput>
  }

  export type projects_tblUpdateManyWithWhereWithoutPlayers_tblInput = {
    where: projects_tblScalarWhereInput
    data: XOR<projects_tblUpdateManyMutationInput, projects_tblUncheckedUpdateManyWithoutProjects_tblInput>
  }

  export type tools_tblCreateWithoutPlugins_tblInput = {
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    projects_tbl: projects_tblCreateNestedOneWithoutTools_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedCreateWithoutPlugins_tblInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    too_project: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblCreateOrConnectWithoutPlugins_tblInput = {
    where: tools_tblWhereUniqueInput
    create: XOR<tools_tblCreateWithoutPlugins_tblInput, tools_tblUncheckedCreateWithoutPlugins_tblInput>
  }

  export type tools_tblUpsertWithoutPlugins_tblInput = {
    update: XOR<tools_tblUpdateWithoutPlugins_tblInput, tools_tblUncheckedUpdateWithoutPlugins_tblInput>
    create: XOR<tools_tblCreateWithoutPlugins_tblInput, tools_tblUncheckedCreateWithoutPlugins_tblInput>
  }

  export type tools_tblUpdateWithoutPlugins_tblInput = {
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    projects_tbl?: projects_tblUpdateOneRequiredWithoutTools_tblInput
    data_tbl?: data_tblUpdateManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedUpdateWithoutPlugins_tblInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    too_project?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutTools_tblInput
  }

  export type images_tblCreateWithoutProjects_tblInput = {
    img_name: string
    img_path: string
    players_tbl?: players_tblCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblUncheckedCreateWithoutProjects_tblInput = {
    img_id?: number
    img_name: string
    img_path: string
    players_tbl?: players_tblUncheckedCreateNestedManyWithoutImages_tblInput
  }

  export type images_tblCreateOrConnectWithoutProjects_tblInput = {
    where: images_tblWhereUniqueInput
    create: XOR<images_tblCreateWithoutProjects_tblInput, images_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type players_tblCreateWithoutProjects_tblInput = {
    images_tbl: images_tblCreateNestedOneWithoutPlayers_tblInput
    roles_tbl: roles_tblCreateNestedOneWithoutPlayers_tblInput
    users_tbl: users_tblCreateNestedOneWithoutPlayers_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateWithoutProjects_tblInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
    ply_user: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblCreateOrConnectWithoutProjects_tblInput = {
    where: players_tblWhereUniqueInput
    create: XOR<players_tblCreateWithoutProjects_tblInput, players_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type tools_tblCreateWithoutProjects_tblInput = {
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    data_tbl?: data_tblCreateNestedManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedCreateWithoutProjects_tblInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUncheckedCreateNestedManyWithoutTools_tblInput
  }

  export type tools_tblCreateOrConnectWithoutProjects_tblInput = {
    where: tools_tblWhereUniqueInput
    create: XOR<tools_tblCreateWithoutProjects_tblInput, tools_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type tools_tblCreateManyProjects_tblInputEnvelope = {
    data: Enumerable<tools_tblCreateManyProjects_tblInput>
    skipDuplicates?: boolean
  }

  export type images_tblUpsertWithoutProjects_tblInput = {
    update: XOR<images_tblUpdateWithoutProjects_tblInput, images_tblUncheckedUpdateWithoutProjects_tblInput>
    create: XOR<images_tblCreateWithoutProjects_tblInput, images_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type images_tblUpdateWithoutProjects_tblInput = {
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    players_tbl?: players_tblUpdateManyWithoutImages_tblInput
  }

  export type images_tblUncheckedUpdateWithoutProjects_tblInput = {
    img_id?: IntFieldUpdateOperationsInput | number
    img_name?: StringFieldUpdateOperationsInput | string
    img_path?: StringFieldUpdateOperationsInput | string
    players_tbl?: players_tblUncheckedUpdateManyWithoutImages_tblInput
  }

  export type players_tblUpsertWithoutProjects_tblInput = {
    update: XOR<players_tblUpdateWithoutProjects_tblInput, players_tblUncheckedUpdateWithoutProjects_tblInput>
    create: XOR<players_tblCreateWithoutProjects_tblInput, players_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type players_tblUpdateWithoutProjects_tblInput = {
    images_tbl?: images_tblUpdateOneRequiredWithoutPlayers_tblInput
    roles_tbl?: roles_tblUpdateOneRequiredWithoutPlayers_tblInput
    users_tbl?: users_tblUpdateOneRequiredWithoutPlayers_tblInput
    data_tbl?: data_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateWithoutProjects_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type tools_tblUpsertWithWhereUniqueWithoutProjects_tblInput = {
    where: tools_tblWhereUniqueInput
    update: XOR<tools_tblUpdateWithoutProjects_tblInput, tools_tblUncheckedUpdateWithoutProjects_tblInput>
    create: XOR<tools_tblCreateWithoutProjects_tblInput, tools_tblUncheckedCreateWithoutProjects_tblInput>
  }

  export type tools_tblUpdateWithWhereUniqueWithoutProjects_tblInput = {
    where: tools_tblWhereUniqueInput
    data: XOR<tools_tblUpdateWithoutProjects_tblInput, tools_tblUncheckedUpdateWithoutProjects_tblInput>
  }

  export type tools_tblUpdateManyWithWhereWithoutProjects_tblInput = {
    where: tools_tblScalarWhereInput
    data: XOR<tools_tblUpdateManyMutationInput, tools_tblUncheckedUpdateManyWithoutTools_tblInput>
  }

  export type tools_tblScalarWhereInput = {
    AND?: Enumerable<tools_tblScalarWhereInput>
    OR?: Enumerable<tools_tblScalarWhereInput>
    NOT?: Enumerable<tools_tblScalarWhereInput>
    too_id?: IntFilter | number
    too_name?: StringFilter | string
    too_description?: StringFilter | string
    too_category?: IntFilter | number
    too_path?: StringFilter | string
    too_project?: IntFilter | number
  }

  export type players_tblCreateWithoutRoles_tblInput = {
    images_tbl: images_tblCreateNestedOneWithoutPlayers_tblInput
    users_tbl: users_tblCreateNestedOneWithoutPlayers_tblInput
    data_tbl?: data_tblCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedCreateWithoutRoles_tblInput = {
    ply_id?: number
    ply_avatar: number
    ply_user: number
    data_tbl?: data_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedCreateNestedManyWithoutPlayers_tblInput
  }

  export type players_tblCreateOrConnectWithoutRoles_tblInput = {
    where: players_tblWhereUniqueInput
    create: XOR<players_tblCreateWithoutRoles_tblInput, players_tblUncheckedCreateWithoutRoles_tblInput>
  }

  export type players_tblCreateManyRoles_tblInputEnvelope = {
    data: Enumerable<players_tblCreateManyRoles_tblInput>
    skipDuplicates?: boolean
  }

  export type players_tblUpsertWithWhereUniqueWithoutRoles_tblInput = {
    where: players_tblWhereUniqueInput
    update: XOR<players_tblUpdateWithoutRoles_tblInput, players_tblUncheckedUpdateWithoutRoles_tblInput>
    create: XOR<players_tblCreateWithoutRoles_tblInput, players_tblUncheckedCreateWithoutRoles_tblInput>
  }

  export type players_tblUpdateWithWhereUniqueWithoutRoles_tblInput = {
    where: players_tblWhereUniqueInput
    data: XOR<players_tblUpdateWithoutRoles_tblInput, players_tblUncheckedUpdateWithoutRoles_tblInput>
  }

  export type players_tblUpdateManyWithWhereWithoutRoles_tblInput = {
    where: players_tblScalarWhereInput
    data: XOR<players_tblUpdateManyMutationInput, players_tblUncheckedUpdateManyWithoutPlayers_tblInput>
  }

  export type projects_tblCreateWithoutTools_tblInput = {
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    images_tbl: images_tblCreateNestedOneWithoutProjects_tblInput
    players_tbl: players_tblCreateNestedOneWithoutProjects_tblInput
  }

  export type projects_tblUncheckedCreateWithoutTools_tblInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_owner: number
    prj_avatar: number
  }

  export type projects_tblCreateOrConnectWithoutTools_tblInput = {
    where: projects_tblWhereUniqueInput
    create: XOR<projects_tblCreateWithoutTools_tblInput, projects_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type data_tblCreateWithoutTools_tblInput = {
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    players_tbl: players_tblCreateNestedOneWithoutData_tblInput
  }

  export type data_tblUncheckedCreateWithoutTools_tblInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_user: number
  }

  export type data_tblCreateOrConnectWithoutTools_tblInput = {
    where: data_tblWhereUniqueInput
    create: XOR<data_tblCreateWithoutTools_tblInput, data_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type data_tblCreateManyTools_tblInputEnvelope = {
    data: Enumerable<data_tblCreateManyTools_tblInput>
    skipDuplicates?: boolean
  }

  export type plugins_tblCreateWithoutTools_tblInput = {
    plg_name: string
    plg_description: string
    plg_path: string
  }

  export type plugins_tblUncheckedCreateWithoutTools_tblInput = {
    plg_id?: number
    plg_name: string
    plg_description: string
    plg_path: string
  }

  export type plugins_tblCreateOrConnectWithoutTools_tblInput = {
    where: plugins_tblWhereUniqueInput
    create: XOR<plugins_tblCreateWithoutTools_tblInput, plugins_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type plugins_tblCreateManyTools_tblInputEnvelope = {
    data: Enumerable<plugins_tblCreateManyTools_tblInput>
    skipDuplicates?: boolean
  }

  export type projects_tblUpsertWithoutTools_tblInput = {
    update: XOR<projects_tblUpdateWithoutTools_tblInput, projects_tblUncheckedUpdateWithoutTools_tblInput>
    create: XOR<projects_tblCreateWithoutTools_tblInput, projects_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type projects_tblUpdateWithoutTools_tblInput = {
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    images_tbl?: images_tblUpdateOneRequiredWithoutProjects_tblInput
    players_tbl?: players_tblUpdateOneRequiredWithoutProjects_tblInput
  }

  export type projects_tblUncheckedUpdateWithoutTools_tblInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_owner?: IntFieldUpdateOperationsInput | number
    prj_avatar?: IntFieldUpdateOperationsInput | number
  }

  export type data_tblUpsertWithWhereUniqueWithoutTools_tblInput = {
    where: data_tblWhereUniqueInput
    update: XOR<data_tblUpdateWithoutTools_tblInput, data_tblUncheckedUpdateWithoutTools_tblInput>
    create: XOR<data_tblCreateWithoutTools_tblInput, data_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type data_tblUpdateWithWhereUniqueWithoutTools_tblInput = {
    where: data_tblWhereUniqueInput
    data: XOR<data_tblUpdateWithoutTools_tblInput, data_tblUncheckedUpdateWithoutTools_tblInput>
  }

  export type data_tblUpdateManyWithWhereWithoutTools_tblInput = {
    where: data_tblScalarWhereInput
    data: XOR<data_tblUpdateManyMutationInput, data_tblUncheckedUpdateManyWithoutData_tblInput>
  }

  export type plugins_tblUpsertWithWhereUniqueWithoutTools_tblInput = {
    where: plugins_tblWhereUniqueInput
    update: XOR<plugins_tblUpdateWithoutTools_tblInput, plugins_tblUncheckedUpdateWithoutTools_tblInput>
    create: XOR<plugins_tblCreateWithoutTools_tblInput, plugins_tblUncheckedCreateWithoutTools_tblInput>
  }

  export type plugins_tblUpdateWithWhereUniqueWithoutTools_tblInput = {
    where: plugins_tblWhereUniqueInput
    data: XOR<plugins_tblUpdateWithoutTools_tblInput, plugins_tblUncheckedUpdateWithoutTools_tblInput>
  }

  export type plugins_tblUpdateManyWithWhereWithoutTools_tblInput = {
    where: plugins_tblScalarWhereInput
    data: XOR<plugins_tblUpdateManyMutationInput, plugins_tblUncheckedUpdateManyWithoutPlugins_tblInput>
  }

  export type plugins_tblScalarWhereInput = {
    AND?: Enumerable<plugins_tblScalarWhereInput>
    OR?: Enumerable<plugins_tblScalarWhereInput>
    NOT?: Enumerable<plugins_tblScalarWhereInput>
    plg_id?: IntFilter | number
    plg_name?: StringFilter | string
    plg_description?: StringFilter | string
    plg_path?: StringFilter | string
    plg_tool?: IntFilter | number
  }

  export type players_tblCreateManyUsers_tblInput = {
    ply_id?: number
    ply_role: number
    ply_avatar: number
  }

  export type players_tblUpdateWithoutUsers_tblInput = {
    images_tbl?: images_tblUpdateOneRequiredWithoutPlayers_tblInput
    roles_tbl?: roles_tblUpdateOneRequiredWithoutPlayers_tblInput
    data_tbl?: data_tblUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateWithoutUsers_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateManyWithoutPlayers_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
  }

  export type players_tblCreateManyImages_tblInput = {
    ply_id?: number
    ply_role: number
    ply_user: number
  }

  export type projects_tblCreateManyImages_tblInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_owner: number
  }

  export type players_tblUpdateWithoutImages_tblInput = {
    roles_tbl?: roles_tblUpdateOneRequiredWithoutPlayers_tblInput
    users_tbl?: users_tblUpdateOneRequiredWithoutPlayers_tblInput
    data_tbl?: data_tblUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateWithoutImages_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_role?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type projects_tblUpdateWithoutImages_tblInput = {
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    players_tbl?: players_tblUpdateOneRequiredWithoutProjects_tblInput
    tools_tbl?: tools_tblUpdateManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedUpdateWithoutImages_tblInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_owner?: IntFieldUpdateOperationsInput | number
    tools_tbl?: tools_tblUncheckedUpdateManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedUpdateManyWithoutProjects_tblInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_owner?: IntFieldUpdateOperationsInput | number
  }

  export type data_tblCreateManyPlayers_tblInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_tool: number
  }

  export type projects_tblCreateManyPlayers_tblInput = {
    prj_id?: number
    proj_name: string
    prj_description: number
    prj_config: JsonNullValueInput | InputJsonValue
    prj_avatar: number
  }

  export type data_tblUpdateWithoutPlayers_tblInput = {
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    tools_tbl?: tools_tblUpdateOneRequiredWithoutData_tblInput
  }

  export type data_tblUncheckedUpdateWithoutPlayers_tblInput = {
    dta_id?: IntFieldUpdateOperationsInput | number
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    dta_tool?: IntFieldUpdateOperationsInput | number
  }

  export type data_tblUncheckedUpdateManyWithoutData_tblInput = {
    dta_id?: IntFieldUpdateOperationsInput | number
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    dta_tool?: IntFieldUpdateOperationsInput | number
  }

  export type projects_tblUpdateWithoutPlayers_tblInput = {
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    images_tbl?: images_tblUpdateOneRequiredWithoutProjects_tblInput
    tools_tbl?: tools_tblUpdateManyWithoutProjects_tblInput
  }

  export type projects_tblUncheckedUpdateWithoutPlayers_tblInput = {
    prj_id?: IntFieldUpdateOperationsInput | number
    proj_name?: StringFieldUpdateOperationsInput | string
    prj_description?: IntFieldUpdateOperationsInput | number
    prj_config?: JsonNullValueInput | InputJsonValue
    prj_avatar?: IntFieldUpdateOperationsInput | number
    tools_tbl?: tools_tblUncheckedUpdateManyWithoutProjects_tblInput
  }

  export type tools_tblCreateManyProjects_tblInput = {
    too_id?: number
    too_name: string
    too_description: string
    too_category: number
    too_path: string
  }

  export type tools_tblUpdateWithoutProjects_tblInput = {
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    data_tbl?: data_tblUpdateManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUpdateManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedUpdateWithoutProjects_tblInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
    data_tbl?: data_tblUncheckedUpdateManyWithoutTools_tblInput
    plugins_tbl?: plugins_tblUncheckedUpdateManyWithoutTools_tblInput
  }

  export type tools_tblUncheckedUpdateManyWithoutTools_tblInput = {
    too_id?: IntFieldUpdateOperationsInput | number
    too_name?: StringFieldUpdateOperationsInput | string
    too_description?: StringFieldUpdateOperationsInput | string
    too_category?: IntFieldUpdateOperationsInput | number
    too_path?: StringFieldUpdateOperationsInput | string
  }

  export type players_tblCreateManyRoles_tblInput = {
    ply_id?: number
    ply_avatar: number
    ply_user: number
  }

  export type players_tblUpdateWithoutRoles_tblInput = {
    images_tbl?: images_tblUpdateOneRequiredWithoutPlayers_tblInput
    users_tbl?: users_tblUpdateOneRequiredWithoutPlayers_tblInput
    data_tbl?: data_tblUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUpdateManyWithoutPlayers_tblInput
  }

  export type players_tblUncheckedUpdateWithoutRoles_tblInput = {
    ply_id?: IntFieldUpdateOperationsInput | number
    ply_avatar?: IntFieldUpdateOperationsInput | number
    ply_user?: IntFieldUpdateOperationsInput | number
    data_tbl?: data_tblUncheckedUpdateManyWithoutPlayers_tblInput
    projects_tbl?: projects_tblUncheckedUpdateManyWithoutPlayers_tblInput
  }

  export type data_tblCreateManyTools_tblInput = {
    dta_id?: number
    dta_date: Date | string
    dta_content: JsonNullValueInput | InputJsonValue
    dta_user: number
  }

  export type plugins_tblCreateManyTools_tblInput = {
    plg_id?: number
    plg_name: string
    plg_description: string
    plg_path: string
  }

  export type data_tblUpdateWithoutTools_tblInput = {
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    players_tbl?: players_tblUpdateOneRequiredWithoutData_tblInput
  }

  export type data_tblUncheckedUpdateWithoutTools_tblInput = {
    dta_id?: IntFieldUpdateOperationsInput | number
    dta_date?: DateTimeFieldUpdateOperationsInput | Date | string
    dta_content?: JsonNullValueInput | InputJsonValue
    dta_user?: IntFieldUpdateOperationsInput | number
  }

  export type plugins_tblUpdateWithoutTools_tblInput = {
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
  }

  export type plugins_tblUncheckedUpdateWithoutTools_tblInput = {
    plg_id?: IntFieldUpdateOperationsInput | number
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
  }

  export type plugins_tblUncheckedUpdateManyWithoutPlugins_tblInput = {
    plg_id?: IntFieldUpdateOperationsInput | number
    plg_name?: StringFieldUpdateOperationsInput | string
    plg_description?: StringFieldUpdateOperationsInput | string
    plg_path?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}