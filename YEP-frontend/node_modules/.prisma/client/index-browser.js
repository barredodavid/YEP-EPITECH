
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Users_tblScalarFieldEnum = makeEnum({
  usr_id: 'usr_id',
  usr_username: 'usr_username',
  usr_mail: 'usr_mail',
  usr_password: 'usr_password',
  usr_permissions: 'usr_permissions',
  usr_token_iat: 'usr_token_iat',
  usr_token_exp: 'usr_token_exp'
});

exports.Prisma.Data_tblScalarFieldEnum = makeEnum({
  dta_id: 'dta_id',
  dta_date: 'dta_date',
  dta_content: 'dta_content',
  dta_tool: 'dta_tool',
  dta_user: 'dta_user'
});

exports.Prisma.Images_tblScalarFieldEnum = makeEnum({
  img_id: 'img_id',
  img_name: 'img_name',
  img_path: 'img_path'
});

exports.Prisma.Players_tblScalarFieldEnum = makeEnum({
  ply_id: 'ply_id',
  ply_role: 'ply_role',
  ply_avatar: 'ply_avatar',
  ply_user: 'ply_user'
});

exports.Prisma.Plugins_tblScalarFieldEnum = makeEnum({
  plg_id: 'plg_id',
  plg_name: 'plg_name',
  plg_description: 'plg_description',
  plg_path: 'plg_path',
  plg_tool: 'plg_tool'
});

exports.Prisma.Projects_tblScalarFieldEnum = makeEnum({
  prj_id: 'prj_id',
  proj_name: 'proj_name',
  prj_description: 'prj_description',
  prj_config: 'prj_config',
  prj_owner: 'prj_owner',
  prj_avatar: 'prj_avatar'
});

exports.Prisma.Roles_tblScalarFieldEnum = makeEnum({
  rle_id: 'rle_id',
  rle_name: 'rle_name',
  rle_description: 'rle_description'
});

exports.Prisma.Tools_tblScalarFieldEnum = makeEnum({
  too_id: 'too_id',
  too_name: 'too_name',
  too_description: 'too_description',
  too_category: 'too_category',
  too_path: 'too_path',
  too_project: 'too_project'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  users_tbl: 'users_tbl',
  data_tbl: 'data_tbl',
  images_tbl: 'images_tbl',
  players_tbl: 'players_tbl',
  plugins_tbl: 'plugins_tbl',
  projects_tbl: 'projects_tbl',
  roles_tbl: 'roles_tbl',
  tools_tbl: 'tools_tbl'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
